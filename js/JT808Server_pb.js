/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Data0x8103', null, global);
goog.exportSymbol('proto.Data0x8103.TerminalSettings', null, global);
goog.exportSymbol('proto.Data0x8105', null, global);
goog.exportSymbol('proto.Data0x8105.CommandParameters', null, global);
goog.exportSymbol('proto.Data0x8108', null, global);
goog.exportSymbol('proto.Data0x8202', null, global);
goog.exportSymbol('proto.Data0x8203', null, global);
goog.exportSymbol('proto.Data0x8203.Type', null, global);
goog.exportSymbol('proto.Data0x8300', null, global);
goog.exportSymbol('proto.Data0x8301', null, global);
goog.exportSymbol('proto.Data0x8301.Events', null, global);
goog.exportSymbol('proto.Data0x8302', null, global);
goog.exportSymbol('proto.Data0x8302.Answers', null, global);
goog.exportSymbol('proto.Data0x8302.Flag', null, global);
goog.exportSymbol('proto.Data0x8303', null, global);
goog.exportSymbol('proto.Data0x8303.Menus', null, global);
goog.exportSymbol('proto.Data0x8304', null, global);
goog.exportSymbol('proto.Data0x8400', null, global);
goog.exportSymbol('proto.Data0x8401', null, global);
goog.exportSymbol('proto.Data0x8401.Contacts', null, global);
goog.exportSymbol('proto.Data0x8500', null, global);
goog.exportSymbol('proto.Data0x8600', null, global);
goog.exportSymbol('proto.Data0x8600.Areas', null, global);
goog.exportSymbol('proto.Data0x8600.Areas.Flag', null, global);
goog.exportSymbol('proto.Data0x8601', null, global);
goog.exportSymbol('proto.Data0x8601.AreaIds', null, global);
goog.exportSymbol('proto.Data0x8602', null, global);
goog.exportSymbol('proto.Data0x8602.Areas', null, global);
goog.exportSymbol('proto.Data0x8602.Areas.Flag', null, global);
goog.exportSymbol('proto.Data0x8604', null, global);
goog.exportSymbol('proto.Data0x8604.Flag', null, global);
goog.exportSymbol('proto.Data0x8604.Points', null, global);
goog.exportSymbol('proto.Data0x8606', null, global);
goog.exportSymbol('proto.Data0x8606.Flag', null, global);
goog.exportSymbol('proto.Data0x8606.Points', null, global);
goog.exportSymbol('proto.Data0x8606.Points.Attrib', null, global);
goog.exportSymbol('proto.Data0x8608', null, global);
goog.exportSymbol('proto.Data0x8608.Ids', null, global);
goog.exportSymbol('proto.Data0x8700', null, global);
goog.exportSymbol('proto.Data0x8800', null, global);
goog.exportSymbol('proto.Data0x8800.Ids', null, global);
goog.exportSymbol('proto.Data0x8801', null, global);
goog.exportSymbol('proto.Data0x8802', null, global);
goog.exportSymbol('proto.Data0x8803', null, global);
goog.exportSymbol('proto.Data0x8804', null, global);
goog.exportSymbol('proto.Data0x8805', null, global);
goog.exportSymbol('proto.Data0x8900', null, global);
goog.exportSymbol('proto.Data0x8A00', null, global);
goog.exportSymbol('proto.Protocol', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Protocol.oneofGroups_);
};
goog.inherits(proto.Protocol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.displayName = 'proto.Protocol';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Protocol.oneofGroups_ = [[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]];

/**
 * @enum {number}
 */
proto.Protocol.DatabodyCase = {
  DATABODY_NOT_SET: 0,
  DATA0X8103: 4,
  DATA0X8105: 5,
  DATA0X8108: 6,
  DATA0X8202: 7,
  DATA0X8300: 8,
  DATA0X8301: 9,
  DATA0X8302: 10,
  DATA0X8303: 11,
  DATA0X8304: 12,
  DATA0X8400: 13,
  DATA0X8401: 14,
  DATA0X8500: 15,
  DATA0X8600: 16,
  DATA0X8601: 17,
  DATA0X8602: 18,
  DATA0X8604: 19,
  DATA0X8606: 20,
  DATA0X8700: 21,
  DATA0X8800: 22,
  DATA0X8801: 23,
  DATA0X8802: 24,
  DATA0X8803: 25,
  DATA0X8804: 26,
  DATA0X8805: 27,
  DATA0X8900: 28,
  DATA0X8A00: 29,
  DATA0X8203: 30,
  DATA0X8608: 31
};

/**
 * @return {proto.Protocol.DatabodyCase}
 */
proto.Protocol.prototype.getDatabodyCase = function() {
  return /** @type {proto.Protocol.DatabodyCase} */(jspb.Message.computeOneofCase(this, proto.Protocol.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    data0x8103: (f = msg.getData0x8103()) && proto.Data0x8103.toObject(includeInstance, f),
    data0x8105: (f = msg.getData0x8105()) && proto.Data0x8105.toObject(includeInstance, f),
    data0x8108: (f = msg.getData0x8108()) && proto.Data0x8108.toObject(includeInstance, f),
    data0x8202: (f = msg.getData0x8202()) && proto.Data0x8202.toObject(includeInstance, f),
    data0x8300: (f = msg.getData0x8300()) && proto.Data0x8300.toObject(includeInstance, f),
    data0x8301: (f = msg.getData0x8301()) && proto.Data0x8301.toObject(includeInstance, f),
    data0x8302: (f = msg.getData0x8302()) && proto.Data0x8302.toObject(includeInstance, f),
    data0x8303: (f = msg.getData0x8303()) && proto.Data0x8303.toObject(includeInstance, f),
    data0x8304: (f = msg.getData0x8304()) && proto.Data0x8304.toObject(includeInstance, f),
    data0x8400: (f = msg.getData0x8400()) && proto.Data0x8400.toObject(includeInstance, f),
    data0x8401: (f = msg.getData0x8401()) && proto.Data0x8401.toObject(includeInstance, f),
    data0x8500: (f = msg.getData0x8500()) && proto.Data0x8500.toObject(includeInstance, f),
    data0x8600: (f = msg.getData0x8600()) && proto.Data0x8600.toObject(includeInstance, f),
    data0x8601: (f = msg.getData0x8601()) && proto.Data0x8601.toObject(includeInstance, f),
    data0x8602: (f = msg.getData0x8602()) && proto.Data0x8602.toObject(includeInstance, f),
    data0x8604: (f = msg.getData0x8604()) && proto.Data0x8604.toObject(includeInstance, f),
    data0x8606: (f = msg.getData0x8606()) && proto.Data0x8606.toObject(includeInstance, f),
    data0x8700: (f = msg.getData0x8700()) && proto.Data0x8700.toObject(includeInstance, f),
    data0x8800: (f = msg.getData0x8800()) && proto.Data0x8800.toObject(includeInstance, f),
    data0x8801: (f = msg.getData0x8801()) && proto.Data0x8801.toObject(includeInstance, f),
    data0x8802: (f = msg.getData0x8802()) && proto.Data0x8802.toObject(includeInstance, f),
    data0x8803: (f = msg.getData0x8803()) && proto.Data0x8803.toObject(includeInstance, f),
    data0x8804: (f = msg.getData0x8804()) && proto.Data0x8804.toObject(includeInstance, f),
    data0x8805: (f = msg.getData0x8805()) && proto.Data0x8805.toObject(includeInstance, f),
    data0x8900: (f = msg.getData0x8900()) && proto.Data0x8900.toObject(includeInstance, f),
    data0x8a00: (f = msg.getData0x8a00()) && proto.Data0x8A00.toObject(includeInstance, f),
    data0x8203: (f = msg.getData0x8203()) && proto.Data0x8203.toObject(includeInstance, f),
    data0x8608: (f = msg.getData0x8608()) && proto.Data0x8608.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol}
 */
proto.Protocol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol;
  return proto.Protocol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol}
 */
proto.Protocol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    case 4:
      var value = new proto.Data0x8103;
      reader.readMessage(value,proto.Data0x8103.deserializeBinaryFromReader);
      msg.setData0x8103(value);
      break;
    case 5:
      var value = new proto.Data0x8105;
      reader.readMessage(value,proto.Data0x8105.deserializeBinaryFromReader);
      msg.setData0x8105(value);
      break;
    case 6:
      var value = new proto.Data0x8108;
      reader.readMessage(value,proto.Data0x8108.deserializeBinaryFromReader);
      msg.setData0x8108(value);
      break;
    case 7:
      var value = new proto.Data0x8202;
      reader.readMessage(value,proto.Data0x8202.deserializeBinaryFromReader);
      msg.setData0x8202(value);
      break;
    case 8:
      var value = new proto.Data0x8300;
      reader.readMessage(value,proto.Data0x8300.deserializeBinaryFromReader);
      msg.setData0x8300(value);
      break;
    case 9:
      var value = new proto.Data0x8301;
      reader.readMessage(value,proto.Data0x8301.deserializeBinaryFromReader);
      msg.setData0x8301(value);
      break;
    case 10:
      var value = new proto.Data0x8302;
      reader.readMessage(value,proto.Data0x8302.deserializeBinaryFromReader);
      msg.setData0x8302(value);
      break;
    case 11:
      var value = new proto.Data0x8303;
      reader.readMessage(value,proto.Data0x8303.deserializeBinaryFromReader);
      msg.setData0x8303(value);
      break;
    case 12:
      var value = new proto.Data0x8304;
      reader.readMessage(value,proto.Data0x8304.deserializeBinaryFromReader);
      msg.setData0x8304(value);
      break;
    case 13:
      var value = new proto.Data0x8400;
      reader.readMessage(value,proto.Data0x8400.deserializeBinaryFromReader);
      msg.setData0x8400(value);
      break;
    case 14:
      var value = new proto.Data0x8401;
      reader.readMessage(value,proto.Data0x8401.deserializeBinaryFromReader);
      msg.setData0x8401(value);
      break;
    case 15:
      var value = new proto.Data0x8500;
      reader.readMessage(value,proto.Data0x8500.deserializeBinaryFromReader);
      msg.setData0x8500(value);
      break;
    case 16:
      var value = new proto.Data0x8600;
      reader.readMessage(value,proto.Data0x8600.deserializeBinaryFromReader);
      msg.setData0x8600(value);
      break;
    case 17:
      var value = new proto.Data0x8601;
      reader.readMessage(value,proto.Data0x8601.deserializeBinaryFromReader);
      msg.setData0x8601(value);
      break;
    case 18:
      var value = new proto.Data0x8602;
      reader.readMessage(value,proto.Data0x8602.deserializeBinaryFromReader);
      msg.setData0x8602(value);
      break;
    case 19:
      var value = new proto.Data0x8604;
      reader.readMessage(value,proto.Data0x8604.deserializeBinaryFromReader);
      msg.setData0x8604(value);
      break;
    case 20:
      var value = new proto.Data0x8606;
      reader.readMessage(value,proto.Data0x8606.deserializeBinaryFromReader);
      msg.setData0x8606(value);
      break;
    case 21:
      var value = new proto.Data0x8700;
      reader.readMessage(value,proto.Data0x8700.deserializeBinaryFromReader);
      msg.setData0x8700(value);
      break;
    case 22:
      var value = new proto.Data0x8800;
      reader.readMessage(value,proto.Data0x8800.deserializeBinaryFromReader);
      msg.setData0x8800(value);
      break;
    case 23:
      var value = new proto.Data0x8801;
      reader.readMessage(value,proto.Data0x8801.deserializeBinaryFromReader);
      msg.setData0x8801(value);
      break;
    case 24:
      var value = new proto.Data0x8802;
      reader.readMessage(value,proto.Data0x8802.deserializeBinaryFromReader);
      msg.setData0x8802(value);
      break;
    case 25:
      var value = new proto.Data0x8803;
      reader.readMessage(value,proto.Data0x8803.deserializeBinaryFromReader);
      msg.setData0x8803(value);
      break;
    case 26:
      var value = new proto.Data0x8804;
      reader.readMessage(value,proto.Data0x8804.deserializeBinaryFromReader);
      msg.setData0x8804(value);
      break;
    case 27:
      var value = new proto.Data0x8805;
      reader.readMessage(value,proto.Data0x8805.deserializeBinaryFromReader);
      msg.setData0x8805(value);
      break;
    case 28:
      var value = new proto.Data0x8900;
      reader.readMessage(value,proto.Data0x8900.deserializeBinaryFromReader);
      msg.setData0x8900(value);
      break;
    case 29:
      var value = new proto.Data0x8A00;
      reader.readMessage(value,proto.Data0x8A00.deserializeBinaryFromReader);
      msg.setData0x8a00(value);
      break;
    case 30:
      var value = new proto.Data0x8203;
      reader.readMessage(value,proto.Data0x8203.deserializeBinaryFromReader);
      msg.setData0x8203(value);
      break;
    case 31:
      var value = new proto.Data0x8608;
      reader.readMessage(value,proto.Data0x8608.deserializeBinaryFromReader);
      msg.setData0x8608(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getData0x8103();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Data0x8103.serializeBinaryToWriter
    );
  }
  f = message.getData0x8105();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Data0x8105.serializeBinaryToWriter
    );
  }
  f = message.getData0x8108();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Data0x8108.serializeBinaryToWriter
    );
  }
  f = message.getData0x8202();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Data0x8202.serializeBinaryToWriter
    );
  }
  f = message.getData0x8300();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Data0x8300.serializeBinaryToWriter
    );
  }
  f = message.getData0x8301();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Data0x8301.serializeBinaryToWriter
    );
  }
  f = message.getData0x8302();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Data0x8302.serializeBinaryToWriter
    );
  }
  f = message.getData0x8303();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.Data0x8303.serializeBinaryToWriter
    );
  }
  f = message.getData0x8304();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.Data0x8304.serializeBinaryToWriter
    );
  }
  f = message.getData0x8400();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.Data0x8400.serializeBinaryToWriter
    );
  }
  f = message.getData0x8401();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.Data0x8401.serializeBinaryToWriter
    );
  }
  f = message.getData0x8500();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.Data0x8500.serializeBinaryToWriter
    );
  }
  f = message.getData0x8600();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.Data0x8600.serializeBinaryToWriter
    );
  }
  f = message.getData0x8601();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.Data0x8601.serializeBinaryToWriter
    );
  }
  f = message.getData0x8602();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.Data0x8602.serializeBinaryToWriter
    );
  }
  f = message.getData0x8604();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.Data0x8604.serializeBinaryToWriter
    );
  }
  f = message.getData0x8606();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.Data0x8606.serializeBinaryToWriter
    );
  }
  f = message.getData0x8700();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.Data0x8700.serializeBinaryToWriter
    );
  }
  f = message.getData0x8800();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.Data0x8800.serializeBinaryToWriter
    );
  }
  f = message.getData0x8801();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.Data0x8801.serializeBinaryToWriter
    );
  }
  f = message.getData0x8802();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.Data0x8802.serializeBinaryToWriter
    );
  }
  f = message.getData0x8803();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.Data0x8803.serializeBinaryToWriter
    );
  }
  f = message.getData0x8804();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.Data0x8804.serializeBinaryToWriter
    );
  }
  f = message.getData0x8805();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.Data0x8805.serializeBinaryToWriter
    );
  }
  f = message.getData0x8900();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.Data0x8900.serializeBinaryToWriter
    );
  }
  f = message.getData0x8a00();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.Data0x8A00.serializeBinaryToWriter
    );
  }
  f = message.getData0x8203();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.Data0x8203.serializeBinaryToWriter
    );
  }
  f = message.getData0x8608();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.Data0x8608.serializeBinaryToWriter
    );
  }
};


/**
 * optional string msgId = 1;
 * @return {string}
 */
proto.Protocol.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Protocol.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string terminalPhone = 2;
 * @return {string}
 */
proto.Protocol.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protocol.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string mainRoleId = 3;
 * @return {string}
 */
proto.Protocol.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Protocol.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Data0x8103 data0x8103 = 4;
 * @return {?proto.Data0x8103}
 */
proto.Protocol.prototype.getData0x8103 = function() {
  return /** @type{?proto.Data0x8103} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8103, 4));
};


/** @param {?proto.Data0x8103|undefined} value */
proto.Protocol.prototype.setData0x8103 = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8103 = function() {
  this.setData0x8103(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8103 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Data0x8105 data0x8105 = 5;
 * @return {?proto.Data0x8105}
 */
proto.Protocol.prototype.getData0x8105 = function() {
  return /** @type{?proto.Data0x8105} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8105, 5));
};


/** @param {?proto.Data0x8105|undefined} value */
proto.Protocol.prototype.setData0x8105 = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8105 = function() {
  this.setData0x8105(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8105 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Data0x8108 data0x8108 = 6;
 * @return {?proto.Data0x8108}
 */
proto.Protocol.prototype.getData0x8108 = function() {
  return /** @type{?proto.Data0x8108} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8108, 6));
};


/** @param {?proto.Data0x8108|undefined} value */
proto.Protocol.prototype.setData0x8108 = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8108 = function() {
  this.setData0x8108(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8108 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Data0x8202 data0x8202 = 7;
 * @return {?proto.Data0x8202}
 */
proto.Protocol.prototype.getData0x8202 = function() {
  return /** @type{?proto.Data0x8202} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8202, 7));
};


/** @param {?proto.Data0x8202|undefined} value */
proto.Protocol.prototype.setData0x8202 = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8202 = function() {
  this.setData0x8202(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8202 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Data0x8300 data0x8300 = 8;
 * @return {?proto.Data0x8300}
 */
proto.Protocol.prototype.getData0x8300 = function() {
  return /** @type{?proto.Data0x8300} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8300, 8));
};


/** @param {?proto.Data0x8300|undefined} value */
proto.Protocol.prototype.setData0x8300 = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8300 = function() {
  this.setData0x8300(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8300 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Data0x8301 data0x8301 = 9;
 * @return {?proto.Data0x8301}
 */
proto.Protocol.prototype.getData0x8301 = function() {
  return /** @type{?proto.Data0x8301} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8301, 9));
};


/** @param {?proto.Data0x8301|undefined} value */
proto.Protocol.prototype.setData0x8301 = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8301 = function() {
  this.setData0x8301(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8301 = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Data0x8302 data0x8302 = 10;
 * @return {?proto.Data0x8302}
 */
proto.Protocol.prototype.getData0x8302 = function() {
  return /** @type{?proto.Data0x8302} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8302, 10));
};


/** @param {?proto.Data0x8302|undefined} value */
proto.Protocol.prototype.setData0x8302 = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8302 = function() {
  this.setData0x8302(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8302 = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Data0x8303 data0x8303 = 11;
 * @return {?proto.Data0x8303}
 */
proto.Protocol.prototype.getData0x8303 = function() {
  return /** @type{?proto.Data0x8303} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8303, 11));
};


/** @param {?proto.Data0x8303|undefined} value */
proto.Protocol.prototype.setData0x8303 = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8303 = function() {
  this.setData0x8303(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8303 = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Data0x8304 data0x8304 = 12;
 * @return {?proto.Data0x8304}
 */
proto.Protocol.prototype.getData0x8304 = function() {
  return /** @type{?proto.Data0x8304} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8304, 12));
};


/** @param {?proto.Data0x8304|undefined} value */
proto.Protocol.prototype.setData0x8304 = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8304 = function() {
  this.setData0x8304(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8304 = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Data0x8400 data0x8400 = 13;
 * @return {?proto.Data0x8400}
 */
proto.Protocol.prototype.getData0x8400 = function() {
  return /** @type{?proto.Data0x8400} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8400, 13));
};


/** @param {?proto.Data0x8400|undefined} value */
proto.Protocol.prototype.setData0x8400 = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8400 = function() {
  this.setData0x8400(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8400 = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Data0x8401 data0x8401 = 14;
 * @return {?proto.Data0x8401}
 */
proto.Protocol.prototype.getData0x8401 = function() {
  return /** @type{?proto.Data0x8401} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8401, 14));
};


/** @param {?proto.Data0x8401|undefined} value */
proto.Protocol.prototype.setData0x8401 = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8401 = function() {
  this.setData0x8401(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8401 = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Data0x8500 data0x8500 = 15;
 * @return {?proto.Data0x8500}
 */
proto.Protocol.prototype.getData0x8500 = function() {
  return /** @type{?proto.Data0x8500} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8500, 15));
};


/** @param {?proto.Data0x8500|undefined} value */
proto.Protocol.prototype.setData0x8500 = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8500 = function() {
  this.setData0x8500(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8500 = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional Data0x8600 data0x8600 = 16;
 * @return {?proto.Data0x8600}
 */
proto.Protocol.prototype.getData0x8600 = function() {
  return /** @type{?proto.Data0x8600} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8600, 16));
};


/** @param {?proto.Data0x8600|undefined} value */
proto.Protocol.prototype.setData0x8600 = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8600 = function() {
  this.setData0x8600(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8600 = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Data0x8601 data0x8601 = 17;
 * @return {?proto.Data0x8601}
 */
proto.Protocol.prototype.getData0x8601 = function() {
  return /** @type{?proto.Data0x8601} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8601, 17));
};


/** @param {?proto.Data0x8601|undefined} value */
proto.Protocol.prototype.setData0x8601 = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8601 = function() {
  this.setData0x8601(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8601 = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Data0x8602 data0x8602 = 18;
 * @return {?proto.Data0x8602}
 */
proto.Protocol.prototype.getData0x8602 = function() {
  return /** @type{?proto.Data0x8602} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8602, 18));
};


/** @param {?proto.Data0x8602|undefined} value */
proto.Protocol.prototype.setData0x8602 = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8602 = function() {
  this.setData0x8602(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8602 = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional Data0x8604 data0x8604 = 19;
 * @return {?proto.Data0x8604}
 */
proto.Protocol.prototype.getData0x8604 = function() {
  return /** @type{?proto.Data0x8604} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8604, 19));
};


/** @param {?proto.Data0x8604|undefined} value */
proto.Protocol.prototype.setData0x8604 = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8604 = function() {
  this.setData0x8604(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8604 = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional Data0x8606 data0x8606 = 20;
 * @return {?proto.Data0x8606}
 */
proto.Protocol.prototype.getData0x8606 = function() {
  return /** @type{?proto.Data0x8606} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8606, 20));
};


/** @param {?proto.Data0x8606|undefined} value */
proto.Protocol.prototype.setData0x8606 = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8606 = function() {
  this.setData0x8606(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8606 = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional Data0x8700 data0x8700 = 21;
 * @return {?proto.Data0x8700}
 */
proto.Protocol.prototype.getData0x8700 = function() {
  return /** @type{?proto.Data0x8700} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8700, 21));
};


/** @param {?proto.Data0x8700|undefined} value */
proto.Protocol.prototype.setData0x8700 = function(value) {
  jspb.Message.setOneofWrapperField(this, 21, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8700 = function() {
  this.setData0x8700(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8700 = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional Data0x8800 data0x8800 = 22;
 * @return {?proto.Data0x8800}
 */
proto.Protocol.prototype.getData0x8800 = function() {
  return /** @type{?proto.Data0x8800} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8800, 22));
};


/** @param {?proto.Data0x8800|undefined} value */
proto.Protocol.prototype.setData0x8800 = function(value) {
  jspb.Message.setOneofWrapperField(this, 22, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8800 = function() {
  this.setData0x8800(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8800 = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional Data0x8801 data0x8801 = 23;
 * @return {?proto.Data0x8801}
 */
proto.Protocol.prototype.getData0x8801 = function() {
  return /** @type{?proto.Data0x8801} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8801, 23));
};


/** @param {?proto.Data0x8801|undefined} value */
proto.Protocol.prototype.setData0x8801 = function(value) {
  jspb.Message.setOneofWrapperField(this, 23, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8801 = function() {
  this.setData0x8801(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8801 = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional Data0x8802 data0x8802 = 24;
 * @return {?proto.Data0x8802}
 */
proto.Protocol.prototype.getData0x8802 = function() {
  return /** @type{?proto.Data0x8802} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8802, 24));
};


/** @param {?proto.Data0x8802|undefined} value */
proto.Protocol.prototype.setData0x8802 = function(value) {
  jspb.Message.setOneofWrapperField(this, 24, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8802 = function() {
  this.setData0x8802(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8802 = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional Data0x8803 data0x8803 = 25;
 * @return {?proto.Data0x8803}
 */
proto.Protocol.prototype.getData0x8803 = function() {
  return /** @type{?proto.Data0x8803} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8803, 25));
};


/** @param {?proto.Data0x8803|undefined} value */
proto.Protocol.prototype.setData0x8803 = function(value) {
  jspb.Message.setOneofWrapperField(this, 25, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8803 = function() {
  this.setData0x8803(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8803 = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional Data0x8804 data0x8804 = 26;
 * @return {?proto.Data0x8804}
 */
proto.Protocol.prototype.getData0x8804 = function() {
  return /** @type{?proto.Data0x8804} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8804, 26));
};


/** @param {?proto.Data0x8804|undefined} value */
proto.Protocol.prototype.setData0x8804 = function(value) {
  jspb.Message.setOneofWrapperField(this, 26, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8804 = function() {
  this.setData0x8804(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8804 = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional Data0x8805 data0x8805 = 27;
 * @return {?proto.Data0x8805}
 */
proto.Protocol.prototype.getData0x8805 = function() {
  return /** @type{?proto.Data0x8805} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8805, 27));
};


/** @param {?proto.Data0x8805|undefined} value */
proto.Protocol.prototype.setData0x8805 = function(value) {
  jspb.Message.setOneofWrapperField(this, 27, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8805 = function() {
  this.setData0x8805(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8805 = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional Data0x8900 data0x8900 = 28;
 * @return {?proto.Data0x8900}
 */
proto.Protocol.prototype.getData0x8900 = function() {
  return /** @type{?proto.Data0x8900} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8900, 28));
};


/** @param {?proto.Data0x8900|undefined} value */
proto.Protocol.prototype.setData0x8900 = function(value) {
  jspb.Message.setOneofWrapperField(this, 28, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8900 = function() {
  this.setData0x8900(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8900 = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional Data0x8A00 data0x8A00 = 29;
 * @return {?proto.Data0x8A00}
 */
proto.Protocol.prototype.getData0x8a00 = function() {
  return /** @type{?proto.Data0x8A00} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8A00, 29));
};


/** @param {?proto.Data0x8A00|undefined} value */
proto.Protocol.prototype.setData0x8a00 = function(value) {
  jspb.Message.setOneofWrapperField(this, 29, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8a00 = function() {
  this.setData0x8a00(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8a00 = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional Data0x8203 data0x8203 = 30;
 * @return {?proto.Data0x8203}
 */
proto.Protocol.prototype.getData0x8203 = function() {
  return /** @type{?proto.Data0x8203} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8203, 30));
};


/** @param {?proto.Data0x8203|undefined} value */
proto.Protocol.prototype.setData0x8203 = function(value) {
  jspb.Message.setOneofWrapperField(this, 30, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8203 = function() {
  this.setData0x8203(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8203 = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional Data0x8608 data0x8608 = 31;
 * @return {?proto.Data0x8608}
 */
proto.Protocol.prototype.getData0x8608 = function() {
  return /** @type{?proto.Data0x8608} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8608, 31));
};


/** @param {?proto.Data0x8608|undefined} value */
proto.Protocol.prototype.setData0x8608 = function(value) {
  jspb.Message.setOneofWrapperField(this, 31, proto.Protocol.oneofGroups_[0], value);
};


proto.Protocol.prototype.clearData0x8608 = function() {
  this.setData0x8608(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.prototype.hasData0x8608 = function() {
  return jspb.Message.getField(this, 31) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8103 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Data0x8103.repeatedFields_, null);
};
goog.inherits(proto.Data0x8103, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8103.displayName = 'proto.Data0x8103';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Data0x8103.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8103.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8103.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8103} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8103.toObject = function(includeInstance, msg) {
  var f, obj = {
    terminalsettingsList: jspb.Message.toObjectList(msg.getTerminalsettingsList(),
    proto.Data0x8103.TerminalSettings.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8103}
 */
proto.Data0x8103.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8103;
  return proto.Data0x8103.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8103} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8103}
 */
proto.Data0x8103.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Data0x8103.TerminalSettings;
      reader.readMessage(value,proto.Data0x8103.TerminalSettings.deserializeBinaryFromReader);
      msg.addTerminalsettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8103.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8103.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8103} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8103.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerminalsettingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Data0x8103.TerminalSettings.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8103.TerminalSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8103.TerminalSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8103.TerminalSettings.displayName = 'proto.Data0x8103.TerminalSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8103.TerminalSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8103.TerminalSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8103.TerminalSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8103.TerminalSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    instructcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parametertype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    values: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8103.TerminalSettings}
 */
proto.Data0x8103.TerminalSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8103.TerminalSettings;
  return proto.Data0x8103.TerminalSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8103.TerminalSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8103.TerminalSettings}
 */
proto.Data0x8103.TerminalSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstructcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setParametertype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8103.TerminalSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8103.TerminalSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8103.TerminalSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8103.TerminalSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstructcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParametertype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValues();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string instructCode = 1;
 * @return {string}
 */
proto.Data0x8103.TerminalSettings.prototype.getInstructcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Data0x8103.TerminalSettings.prototype.setInstructcode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string parameterType = 2;
 * @return {string}
 */
proto.Data0x8103.TerminalSettings.prototype.getParametertype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8103.TerminalSettings.prototype.setParametertype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string values = 3;
 * @return {string}
 */
proto.Data0x8103.TerminalSettings.prototype.getValues = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8103.TerminalSettings.prototype.setValues = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated TerminalSettings terminalSettings = 1;
 * @return {!Array<!proto.Data0x8103.TerminalSettings>}
 */
proto.Data0x8103.prototype.getTerminalsettingsList = function() {
  return /** @type{!Array<!proto.Data0x8103.TerminalSettings>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Data0x8103.TerminalSettings, 1));
};


/** @param {!Array<!proto.Data0x8103.TerminalSettings>} value */
proto.Data0x8103.prototype.setTerminalsettingsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Data0x8103.TerminalSettings=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Data0x8103.TerminalSettings}
 */
proto.Data0x8103.prototype.addTerminalsettings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Data0x8103.TerminalSettings, opt_index);
};


proto.Data0x8103.prototype.clearTerminalsettingsList = function() {
  this.setTerminalsettingsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8105 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8105, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8105.displayName = 'proto.Data0x8105';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8105.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8105.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8105} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8105.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commandparameters: (f = msg.getCommandparameters()) && proto.Data0x8105.CommandParameters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8105}
 */
proto.Data0x8105.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8105;
  return proto.Data0x8105.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8105} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8105}
 */
proto.Data0x8105.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.Data0x8105.CommandParameters;
      reader.readMessage(value,proto.Data0x8105.CommandParameters.deserializeBinaryFromReader);
      msg.setCommandparameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8105.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8105.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8105} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8105.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCommandparameters();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Data0x8105.CommandParameters.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8105.CommandParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8105.CommandParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8105.CommandParameters.displayName = 'proto.Data0x8105.CommandParameters';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8105.CommandParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8105.CommandParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8105.CommandParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8105.CommandParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectioncontrol: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dialname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dialusername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dialpassword: jspb.Message.getFieldWithDefault(msg, 4, ""),
    address: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tcpport: jspb.Message.getFieldWithDefault(msg, 6, ""),
    udpport: jspb.Message.getFieldWithDefault(msg, 7, ""),
    companyid: jspb.Message.getFieldWithDefault(msg, 8, ""),
    spauthcode: jspb.Message.getFieldWithDefault(msg, 9, ""),
    hardwareversion: jspb.Message.getFieldWithDefault(msg, 10, ""),
    firmwareversion: jspb.Message.getFieldWithDefault(msg, 11, ""),
    urladdress: jspb.Message.getFieldWithDefault(msg, 12, ""),
    limittime: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8105.CommandParameters}
 */
proto.Data0x8105.CommandParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8105.CommandParameters;
  return proto.Data0x8105.CommandParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8105.CommandParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8105.CommandParameters}
 */
proto.Data0x8105.CommandParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConnectioncontrol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialusername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialpassword(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTcpport(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUdpport(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompanyid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpauthcode(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setHardwareversion(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirmwareversion(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrladdress(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimittime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8105.CommandParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8105.CommandParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8105.CommandParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8105.CommandParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectioncontrol();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDialname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDialusername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDialpassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTcpport();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUdpport();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCompanyid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSpauthcode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getHardwareversion();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFirmwareversion();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUrladdress();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getLimittime();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
};


/**
 * optional int32 connectionControl = 1;
 * @return {number}
 */
proto.Data0x8105.CommandParameters.prototype.getConnectioncontrol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8105.CommandParameters.prototype.setConnectioncontrol = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string dialName = 2;
 * @return {string}
 */
proto.Data0x8105.CommandParameters.prototype.getDialname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8105.CommandParameters.prototype.setDialname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string dialUserName = 3;
 * @return {string}
 */
proto.Data0x8105.CommandParameters.prototype.getDialusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8105.CommandParameters.prototype.setDialusername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string dialPassword = 4;
 * @return {string}
 */
proto.Data0x8105.CommandParameters.prototype.getDialpassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Data0x8105.CommandParameters.prototype.setDialpassword = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string address = 5;
 * @return {string}
 */
proto.Data0x8105.CommandParameters.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Data0x8105.CommandParameters.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string tcpPort = 6;
 * @return {string}
 */
proto.Data0x8105.CommandParameters.prototype.getTcpport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Data0x8105.CommandParameters.prototype.setTcpport = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string udpPort = 7;
 * @return {string}
 */
proto.Data0x8105.CommandParameters.prototype.getUdpport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Data0x8105.CommandParameters.prototype.setUdpport = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string companyId = 8;
 * @return {string}
 */
proto.Data0x8105.CommandParameters.prototype.getCompanyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Data0x8105.CommandParameters.prototype.setCompanyid = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string spAuthCode = 9;
 * @return {string}
 */
proto.Data0x8105.CommandParameters.prototype.getSpauthcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Data0x8105.CommandParameters.prototype.setSpauthcode = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string hardwareVersion = 10;
 * @return {string}
 */
proto.Data0x8105.CommandParameters.prototype.getHardwareversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Data0x8105.CommandParameters.prototype.setHardwareversion = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string firmwareVersion = 11;
 * @return {string}
 */
proto.Data0x8105.CommandParameters.prototype.getFirmwareversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.Data0x8105.CommandParameters.prototype.setFirmwareversion = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string urlAddress = 12;
 * @return {string}
 */
proto.Data0x8105.CommandParameters.prototype.getUrladdress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.Data0x8105.CommandParameters.prototype.setUrladdress = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional int32 limitTime = 13;
 * @return {number}
 */
proto.Data0x8105.CommandParameters.prototype.getLimittime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.Data0x8105.CommandParameters.prototype.setLimittime = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.Data0x8105.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8105.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional CommandParameters commandParameters = 2;
 * @return {?proto.Data0x8105.CommandParameters}
 */
proto.Data0x8105.prototype.getCommandparameters = function() {
  return /** @type{?proto.Data0x8105.CommandParameters} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8105.CommandParameters, 2));
};


/** @param {?proto.Data0x8105.CommandParameters|undefined} value */
proto.Data0x8105.prototype.setCommandparameters = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Data0x8105.prototype.clearCommandparameters = function() {
  this.setCommandparameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Data0x8105.prototype.hasCommandparameters = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8108 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8108, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8108.displayName = 'proto.Data0x8108';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8108.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8108.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8108} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8108.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    companyid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, ""),
    uplength: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8108}
 */
proto.Data0x8108.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8108;
  return proto.Data0x8108.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8108} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8108}
 */
proto.Data0x8108.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompanyid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUplength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8108.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8108.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8108} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8108.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCompanyid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUplength();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.Data0x8108.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8108.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string companyId = 2;
 * @return {string}
 */
proto.Data0x8108.prototype.getCompanyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8108.prototype.setCompanyid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.Data0x8108.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8108.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 upLength = 4;
 * @return {number}
 */
proto.Data0x8108.prototype.getUplength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Data0x8108.prototype.setUplength = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8202 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8202, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8202.displayName = 'proto.Data0x8202';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8202.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8202.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8202} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8202.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeinterval: jspb.Message.getFieldWithDefault(msg, 1, 0),
    validitytime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8202}
 */
proto.Data0x8202.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8202;
  return proto.Data0x8202.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8202} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8202}
 */
proto.Data0x8202.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeinterval(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValiditytime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8202.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8202.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8202} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8202.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeinterval();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getValiditytime();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 timeInterval = 1;
 * @return {number}
 */
proto.Data0x8202.prototype.getTimeinterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8202.prototype.setTimeinterval = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 validityTime = 2;
 * @return {number}
 */
proto.Data0x8202.prototype.getValiditytime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Data0x8202.prototype.setValiditytime = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8300 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8300, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8300.displayName = 'proto.Data0x8300';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8300.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8300.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8300} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8300.toObject = function(includeInstance, msg) {
  var f, obj = {
    urgent: jspb.Message.getFieldWithDefault(msg, 1, false),
    terminaldisplay: jspb.Message.getFieldWithDefault(msg, 2, false),
    terminalreading: jspb.Message.getFieldWithDefault(msg, 3, false),
    screendisplay: jspb.Message.getFieldWithDefault(msg, 4, false),
    navigationinformation: jspb.Message.getFieldWithDefault(msg, 5, false),
    textmsg: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8300}
 */
proto.Data0x8300.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8300;
  return proto.Data0x8300.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8300} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8300}
 */
proto.Data0x8300.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUrgent(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTerminaldisplay(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTerminalreading(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setScreendisplay(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNavigationinformation(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8300.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8300.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8300} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8300.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrgent();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTerminaldisplay();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTerminalreading();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getScreendisplay();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getNavigationinformation();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getTextmsg();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional bool urgent = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8300.prototype.getUrgent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.Data0x8300.prototype.setUrgent = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool terminalDisplay = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8300.prototype.getTerminaldisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Data0x8300.prototype.setTerminaldisplay = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool terminalReading = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8300.prototype.getTerminalreading = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Data0x8300.prototype.setTerminalreading = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool screenDisplay = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8300.prototype.getScreendisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.Data0x8300.prototype.setScreendisplay = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool navigationInformation = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8300.prototype.getNavigationinformation = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.Data0x8300.prototype.setNavigationinformation = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string textMsg = 6;
 * @return {string}
 */
proto.Data0x8300.prototype.getTextmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Data0x8300.prototype.setTextmsg = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8301 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Data0x8301.repeatedFields_, null);
};
goog.inherits(proto.Data0x8301, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8301.displayName = 'proto.Data0x8301';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Data0x8301.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8301.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8301.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8301} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8301.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.Data0x8301.Events.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8301}
 */
proto.Data0x8301.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8301;
  return proto.Data0x8301.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8301} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8301}
 */
proto.Data0x8301.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.Data0x8301.Events;
      reader.readMessage(value,proto.Data0x8301.Events.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8301.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8301.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8301} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8301.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Data0x8301.Events.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8301.Events = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8301.Events, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8301.Events.displayName = 'proto.Data0x8301.Events';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8301.Events.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8301.Events.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8301.Events} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8301.Events.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    content: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8301.Events}
 */
proto.Data0x8301.Events.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8301.Events;
  return proto.Data0x8301.Events.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8301.Events} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8301.Events}
 */
proto.Data0x8301.Events.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8301.Events.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8301.Events.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8301.Events} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8301.Events.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Data0x8301.Events.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8301.Events.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.Data0x8301.Events.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8301.Events.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.Data0x8301.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8301.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Events events = 2;
 * @return {!Array<!proto.Data0x8301.Events>}
 */
proto.Data0x8301.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.Data0x8301.Events>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Data0x8301.Events, 2));
};


/** @param {!Array<!proto.Data0x8301.Events>} value */
proto.Data0x8301.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Data0x8301.Events=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Data0x8301.Events}
 */
proto.Data0x8301.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Data0x8301.Events, opt_index);
};


proto.Data0x8301.prototype.clearEventsList = function() {
  this.setEventsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8302 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Data0x8302.repeatedFields_, null);
};
goog.inherits(proto.Data0x8302, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8302.displayName = 'proto.Data0x8302';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Data0x8302.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8302.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8302.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8302} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8302.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: (f = msg.getFlag()) && proto.Data0x8302.Flag.toObject(includeInstance, f),
    question: jspb.Message.getFieldWithDefault(msg, 2, ""),
    answersList: jspb.Message.toObjectList(msg.getAnswersList(),
    proto.Data0x8302.Answers.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8302}
 */
proto.Data0x8302.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8302;
  return proto.Data0x8302.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8302} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8302}
 */
proto.Data0x8302.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Data0x8302.Flag;
      reader.readMessage(value,proto.Data0x8302.Flag.deserializeBinaryFromReader);
      msg.setFlag(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestion(value);
      break;
    case 3:
      var value = new proto.Data0x8302.Answers;
      reader.readMessage(value,proto.Data0x8302.Answers.deserializeBinaryFromReader);
      msg.addAnswers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8302.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8302.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8302} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8302.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlag();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Data0x8302.Flag.serializeBinaryToWriter
    );
  }
  f = message.getQuestion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnswersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Data0x8302.Answers.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8302.Flag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8302.Flag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8302.Flag.displayName = 'proto.Data0x8302.Flag';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8302.Flag.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8302.Flag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8302.Flag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8302.Flag.toObject = function(includeInstance, msg) {
  var f, obj = {
    urgent: jspb.Message.getFieldWithDefault(msg, 1, false),
    terminalreading: jspb.Message.getFieldWithDefault(msg, 2, false),
    screendisplay: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8302.Flag}
 */
proto.Data0x8302.Flag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8302.Flag;
  return proto.Data0x8302.Flag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8302.Flag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8302.Flag}
 */
proto.Data0x8302.Flag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUrgent(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTerminalreading(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setScreendisplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8302.Flag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8302.Flag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8302.Flag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8302.Flag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrgent();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTerminalreading();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getScreendisplay();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bool urgent = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8302.Flag.prototype.getUrgent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.Data0x8302.Flag.prototype.setUrgent = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool terminalReading = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8302.Flag.prototype.getTerminalreading = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Data0x8302.Flag.prototype.setTerminalreading = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool screenDisplay = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8302.Flag.prototype.getScreendisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Data0x8302.Flag.prototype.setScreendisplay = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8302.Answers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8302.Answers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8302.Answers.displayName = 'proto.Data0x8302.Answers';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8302.Answers.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8302.Answers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8302.Answers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8302.Answers.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    answer: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8302.Answers}
 */
proto.Data0x8302.Answers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8302.Answers;
  return proto.Data0x8302.Answers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8302.Answers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8302.Answers}
 */
proto.Data0x8302.Answers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8302.Answers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8302.Answers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8302.Answers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8302.Answers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAnswer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Data0x8302.Answers.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8302.Answers.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string answer = 2;
 * @return {string}
 */
proto.Data0x8302.Answers.prototype.getAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8302.Answers.prototype.setAnswer = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Flag flag = 1;
 * @return {?proto.Data0x8302.Flag}
 */
proto.Data0x8302.prototype.getFlag = function() {
  return /** @type{?proto.Data0x8302.Flag} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8302.Flag, 1));
};


/** @param {?proto.Data0x8302.Flag|undefined} value */
proto.Data0x8302.prototype.setFlag = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Data0x8302.prototype.clearFlag = function() {
  this.setFlag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Data0x8302.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string question = 2;
 * @return {string}
 */
proto.Data0x8302.prototype.getQuestion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8302.prototype.setQuestion = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Answers answers = 3;
 * @return {!Array<!proto.Data0x8302.Answers>}
 */
proto.Data0x8302.prototype.getAnswersList = function() {
  return /** @type{!Array<!proto.Data0x8302.Answers>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Data0x8302.Answers, 3));
};


/** @param {!Array<!proto.Data0x8302.Answers>} value */
proto.Data0x8302.prototype.setAnswersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Data0x8302.Answers=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Data0x8302.Answers}
 */
proto.Data0x8302.prototype.addAnswers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Data0x8302.Answers, opt_index);
};


proto.Data0x8302.prototype.clearAnswersList = function() {
  this.setAnswersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8303 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Data0x8303.repeatedFields_, null);
};
goog.inherits(proto.Data0x8303, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8303.displayName = 'proto.Data0x8303';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Data0x8303.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8303.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8303.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8303} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8303.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    menusList: jspb.Message.toObjectList(msg.getMenusList(),
    proto.Data0x8303.Menus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8303}
 */
proto.Data0x8303.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8303;
  return proto.Data0x8303.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8303} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8303}
 */
proto.Data0x8303.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.Data0x8303.Menus;
      reader.readMessage(value,proto.Data0x8303.Menus.deserializeBinaryFromReader);
      msg.addMenus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8303.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8303.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8303} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8303.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMenusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Data0x8303.Menus.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8303.Menus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8303.Menus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8303.Menus.displayName = 'proto.Data0x8303.Menus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8303.Menus.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8303.Menus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8303.Menus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8303.Menus.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    info: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8303.Menus}
 */
proto.Data0x8303.Menus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8303.Menus;
  return proto.Data0x8303.Menus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8303.Menus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8303.Menus}
 */
proto.Data0x8303.Menus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8303.Menus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8303.Menus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8303.Menus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8303.Menus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.Data0x8303.Menus.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8303.Menus.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string info = 2;
 * @return {string}
 */
proto.Data0x8303.Menus.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8303.Menus.prototype.setInfo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.Data0x8303.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8303.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Menus menus = 2;
 * @return {!Array<!proto.Data0x8303.Menus>}
 */
proto.Data0x8303.prototype.getMenusList = function() {
  return /** @type{!Array<!proto.Data0x8303.Menus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Data0x8303.Menus, 2));
};


/** @param {!Array<!proto.Data0x8303.Menus>} value */
proto.Data0x8303.prototype.setMenusList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Data0x8303.Menus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Data0x8303.Menus}
 */
proto.Data0x8303.prototype.addMenus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Data0x8303.Menus, opt_index);
};


proto.Data0x8303.prototype.clearMenusList = function() {
  this.setMenusList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8304 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8304, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8304.displayName = 'proto.Data0x8304';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8304.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8304.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8304} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8304.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    info: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8304}
 */
proto.Data0x8304.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8304;
  return proto.Data0x8304.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8304} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8304}
 */
proto.Data0x8304.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8304.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8304.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8304} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8304.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.Data0x8304.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8304.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string info = 2;
 * @return {string}
 */
proto.Data0x8304.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8304.prototype.setInfo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8400 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8400, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8400.displayName = 'proto.Data0x8400';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8400.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8400.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8400} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8400.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    phone: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8400}
 */
proto.Data0x8400.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8400;
  return proto.Data0x8400.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8400} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8400}
 */
proto.Data0x8400.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8400.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8400.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8400} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8400.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.Data0x8400.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8400.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string phone = 2;
 * @return {string}
 */
proto.Data0x8400.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8400.prototype.setPhone = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8401 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Data0x8401.repeatedFields_, null);
};
goog.inherits(proto.Data0x8401, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8401.displayName = 'proto.Data0x8401';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Data0x8401.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8401.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8401.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8401} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8401.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    contactsList: jspb.Message.toObjectList(msg.getContactsList(),
    proto.Data0x8401.Contacts.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8401}
 */
proto.Data0x8401.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8401;
  return proto.Data0x8401.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8401} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8401}
 */
proto.Data0x8401.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.Data0x8401.Contacts;
      reader.readMessage(value,proto.Data0x8401.Contacts.deserializeBinaryFromReader);
      msg.addContacts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8401.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8401.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8401} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8401.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getContactsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Data0x8401.Contacts.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8401.Contacts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8401.Contacts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8401.Contacts.displayName = 'proto.Data0x8401.Contacts';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8401.Contacts.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8401.Contacts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8401.Contacts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8401.Contacts.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    phone: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8401.Contacts}
 */
proto.Data0x8401.Contacts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8401.Contacts;
  return proto.Data0x8401.Contacts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8401.Contacts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8401.Contacts}
 */
proto.Data0x8401.Contacts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8401.Contacts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8401.Contacts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8401.Contacts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8401.Contacts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.Data0x8401.Contacts.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8401.Contacts.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string phone = 2;
 * @return {string}
 */
proto.Data0x8401.Contacts.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8401.Contacts.prototype.setPhone = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.Data0x8401.Contacts.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8401.Contacts.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.Data0x8401.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8401.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Contacts contacts = 2;
 * @return {!Array<!proto.Data0x8401.Contacts>}
 */
proto.Data0x8401.prototype.getContactsList = function() {
  return /** @type{!Array<!proto.Data0x8401.Contacts>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Data0x8401.Contacts, 2));
};


/** @param {!Array<!proto.Data0x8401.Contacts>} value */
proto.Data0x8401.prototype.setContactsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Data0x8401.Contacts=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Data0x8401.Contacts}
 */
proto.Data0x8401.prototype.addContacts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Data0x8401.Contacts, opt_index);
};


proto.Data0x8401.prototype.clearContactsList = function() {
  this.setContactsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8500 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8500, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8500.displayName = 'proto.Data0x8500';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8500.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8500.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8500} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8500.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8500}
 */
proto.Data0x8500.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8500;
  return proto.Data0x8500.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8500} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8500}
 */
proto.Data0x8500.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8500.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8500.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8500} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8500.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlag();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool flag = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8500.prototype.getFlag = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.Data0x8500.prototype.setFlag = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8600 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Data0x8600.repeatedFields_, null);
};
goog.inherits(proto.Data0x8600, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8600.displayName = 'proto.Data0x8600';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Data0x8600.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8600.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8600.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8600} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8600.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    areasList: jspb.Message.toObjectList(msg.getAreasList(),
    proto.Data0x8600.Areas.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8600}
 */
proto.Data0x8600.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8600;
  return proto.Data0x8600.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8600} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8600}
 */
proto.Data0x8600.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 5:
      var value = new proto.Data0x8600.Areas;
      reader.readMessage(value,proto.Data0x8600.Areas.deserializeBinaryFromReader);
      msg.addAreas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8600.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8600.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8600} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8600.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAreasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Data0x8600.Areas.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8600.Areas = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8600.Areas, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8600.Areas.displayName = 'proto.Data0x8600.Areas';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8600.Areas.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8600.Areas.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8600.Areas} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8600.Areas.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    flag: (f = msg.getFlag()) && proto.Data0x8600.Areas.Flag.toObject(includeInstance, f),
    centerlatitude: jspb.Message.getFieldWithDefault(msg, 3, ""),
    centerlongitude: jspb.Message.getFieldWithDefault(msg, 4, ""),
    radius: jspb.Message.getFieldWithDefault(msg, 5, 0),
    starttime: jspb.Message.getFieldWithDefault(msg, 6, ""),
    endtime: jspb.Message.getFieldWithDefault(msg, 7, ""),
    maxspeed: jspb.Message.getFieldWithDefault(msg, 8, ""),
    overspeedduration: jspb.Message.getFieldWithDefault(msg, 9, 0),
    topspeedatnight: jspb.Message.getFieldWithDefault(msg, 10, ""),
    areaname: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8600.Areas}
 */
proto.Data0x8600.Areas.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8600.Areas;
  return proto.Data0x8600.Areas.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8600.Areas} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8600.Areas}
 */
proto.Data0x8600.Areas.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.Data0x8600.Areas.Flag;
      reader.readMessage(value,proto.Data0x8600.Areas.Flag.deserializeBinaryFromReader);
      msg.setFlag(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCenterlatitude(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCenterlongitude(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRadius(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndtime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxspeed(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOverspeedduration(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopspeedatnight(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAreaname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8600.Areas.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8600.Areas.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8600.Areas} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8600.Areas.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFlag();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Data0x8600.Areas.Flag.serializeBinaryToWriter
    );
  }
  f = message.getCenterlatitude();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCenterlongitude();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRadius();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEndtime();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMaxspeed();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOverspeedduration();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getTopspeedatnight();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getAreaname();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8600.Areas.Flag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8600.Areas.Flag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8600.Areas.Flag.displayName = 'proto.Data0x8600.Areas.Flag';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8600.Areas.Flag.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8600.Areas.Flag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8600.Areas.Flag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8600.Areas.Flag.toObject = function(includeInstance, msg) {
  var f, obj = {
    accordingtotime: jspb.Message.getFieldWithDefault(msg, 1, false),
    speedlimit: jspb.Message.getFieldWithDefault(msg, 2, false),
    inareatodriver: jspb.Message.getFieldWithDefault(msg, 3, false),
    enterareatoplatform: jspb.Message.getFieldWithDefault(msg, 4, false),
    outofareaalarmthedriver: jspb.Message.getFieldWithDefault(msg, 5, false),
    outofareaalarmtheplatform: jspb.Message.getFieldWithDefault(msg, 6, false),
    dimensions: jspb.Message.getFieldWithDefault(msg, 7, false),
    longitude: jspb.Message.getFieldWithDefault(msg, 8, false),
    isopenthedoor: jspb.Message.getFieldWithDefault(msg, 9, false),
    isopencommodel: jspb.Message.getFieldWithDefault(msg, 10, false),
    iscollectgnssdata: jspb.Message.getFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8600.Areas.Flag}
 */
proto.Data0x8600.Areas.Flag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8600.Areas.Flag;
  return proto.Data0x8600.Areas.Flag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8600.Areas.Flag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8600.Areas.Flag}
 */
proto.Data0x8600.Areas.Flag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAccordingtotime(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSpeedlimit(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInareatodriver(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnterareatoplatform(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutofareaalarmthedriver(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutofareaalarmtheplatform(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDimensions(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLongitude(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsopenthedoor(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsopencommodel(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscollectgnssdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8600.Areas.Flag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8600.Areas.Flag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8600.Areas.Flag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8600.Areas.Flag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccordingtotime();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSpeedlimit();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getInareatodriver();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getEnterareatoplatform();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getOutofareaalarmthedriver();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getOutofareaalarmtheplatform();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDimensions();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLongitude();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getIsopenthedoor();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIsopencommodel();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getIscollectgnssdata();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional bool accordingToTime = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8600.Areas.Flag.prototype.getAccordingtotime = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.Data0x8600.Areas.Flag.prototype.setAccordingtotime = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool speedLimit = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8600.Areas.Flag.prototype.getSpeedlimit = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Data0x8600.Areas.Flag.prototype.setSpeedlimit = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool inAreaToDriver = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8600.Areas.Flag.prototype.getInareatodriver = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Data0x8600.Areas.Flag.prototype.setInareatodriver = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool enterAreaToPlatform = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8600.Areas.Flag.prototype.getEnterareatoplatform = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.Data0x8600.Areas.Flag.prototype.setEnterareatoplatform = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool outOfAreaAlarmTheDriver = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8600.Areas.Flag.prototype.getOutofareaalarmthedriver = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.Data0x8600.Areas.Flag.prototype.setOutofareaalarmthedriver = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool outOfAreaAlarmThePlatform = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8600.Areas.Flag.prototype.getOutofareaalarmtheplatform = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.Data0x8600.Areas.Flag.prototype.setOutofareaalarmtheplatform = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool dimensions = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8600.Areas.Flag.prototype.getDimensions = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.Data0x8600.Areas.Flag.prototype.setDimensions = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool longitude = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8600.Areas.Flag.prototype.getLongitude = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.Data0x8600.Areas.Flag.prototype.setLongitude = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool isOpenTheDoor = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8600.Areas.Flag.prototype.getIsopenthedoor = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.Data0x8600.Areas.Flag.prototype.setIsopenthedoor = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool isOpenComModel = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8600.Areas.Flag.prototype.getIsopencommodel = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.Data0x8600.Areas.Flag.prototype.setIsopencommodel = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool isCollectGNSSData = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8600.Areas.Flag.prototype.getIscollectgnssdata = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.Data0x8600.Areas.Flag.prototype.setIscollectgnssdata = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Data0x8600.Areas.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Data0x8600.Areas.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Flag flag = 2;
 * @return {?proto.Data0x8600.Areas.Flag}
 */
proto.Data0x8600.Areas.prototype.getFlag = function() {
  return /** @type{?proto.Data0x8600.Areas.Flag} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8600.Areas.Flag, 2));
};


/** @param {?proto.Data0x8600.Areas.Flag|undefined} value */
proto.Data0x8600.Areas.prototype.setFlag = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Data0x8600.Areas.prototype.clearFlag = function() {
  this.setFlag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Data0x8600.Areas.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string centerLatitude = 3;
 * @return {string}
 */
proto.Data0x8600.Areas.prototype.getCenterlatitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8600.Areas.prototype.setCenterlatitude = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string centerLongitude = 4;
 * @return {string}
 */
proto.Data0x8600.Areas.prototype.getCenterlongitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Data0x8600.Areas.prototype.setCenterlongitude = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 radius = 5;
 * @return {number}
 */
proto.Data0x8600.Areas.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Data0x8600.Areas.prototype.setRadius = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string startTime = 6;
 * @return {string}
 */
proto.Data0x8600.Areas.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Data0x8600.Areas.prototype.setStarttime = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string endTime = 7;
 * @return {string}
 */
proto.Data0x8600.Areas.prototype.getEndtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Data0x8600.Areas.prototype.setEndtime = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string maxSpeed = 8;
 * @return {string}
 */
proto.Data0x8600.Areas.prototype.getMaxspeed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Data0x8600.Areas.prototype.setMaxspeed = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 overSpeedDuration = 9;
 * @return {number}
 */
proto.Data0x8600.Areas.prototype.getOverspeedduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.Data0x8600.Areas.prototype.setOverspeedduration = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string topSpeedAtNight = 10;
 * @return {string}
 */
proto.Data0x8600.Areas.prototype.getTopspeedatnight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Data0x8600.Areas.prototype.setTopspeedatnight = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string areaName = 11;
 * @return {string}
 */
proto.Data0x8600.Areas.prototype.getAreaname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.Data0x8600.Areas.prototype.setAreaname = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string msgId = 1;
 * @return {string}
 */
proto.Data0x8600.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Data0x8600.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string terminalPhone = 2;
 * @return {string}
 */
proto.Data0x8600.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8600.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string mainRoleId = 3;
 * @return {string}
 */
proto.Data0x8600.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8600.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 type = 4;
 * @return {number}
 */
proto.Data0x8600.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Data0x8600.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated Areas areas = 5;
 * @return {!Array<!proto.Data0x8600.Areas>}
 */
proto.Data0x8600.prototype.getAreasList = function() {
  return /** @type{!Array<!proto.Data0x8600.Areas>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Data0x8600.Areas, 5));
};


/** @param {!Array<!proto.Data0x8600.Areas>} value */
proto.Data0x8600.prototype.setAreasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Data0x8600.Areas=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Data0x8600.Areas}
 */
proto.Data0x8600.prototype.addAreas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Data0x8600.Areas, opt_index);
};


proto.Data0x8600.prototype.clearAreasList = function() {
  this.setAreasList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8601 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Data0x8601.repeatedFields_, null);
};
goog.inherits(proto.Data0x8601, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8601.displayName = 'proto.Data0x8601';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Data0x8601.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8601.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8601.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8601} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8601.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    areaidsList: jspb.Message.toObjectList(msg.getAreaidsList(),
    proto.Data0x8601.AreaIds.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8601}
 */
proto.Data0x8601.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8601;
  return proto.Data0x8601.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8601} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8601}
 */
proto.Data0x8601.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    case 4:
      var value = new proto.Data0x8601.AreaIds;
      reader.readMessage(value,proto.Data0x8601.AreaIds.deserializeBinaryFromReader);
      msg.addAreaids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8601.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8601.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8601} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8601.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAreaidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Data0x8601.AreaIds.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8601.AreaIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8601.AreaIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8601.AreaIds.displayName = 'proto.Data0x8601.AreaIds';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8601.AreaIds.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8601.AreaIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8601.AreaIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8601.AreaIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8601.AreaIds}
 */
proto.Data0x8601.AreaIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8601.AreaIds;
  return proto.Data0x8601.AreaIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8601.AreaIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8601.AreaIds}
 */
proto.Data0x8601.AreaIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8601.AreaIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8601.AreaIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8601.AreaIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8601.AreaIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Data0x8601.AreaIds.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Data0x8601.AreaIds.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string msgId = 1;
 * @return {string}
 */
proto.Data0x8601.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Data0x8601.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string terminalPhone = 2;
 * @return {string}
 */
proto.Data0x8601.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8601.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string mainRoleId = 3;
 * @return {string}
 */
proto.Data0x8601.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8601.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated AreaIds areaIds = 4;
 * @return {!Array<!proto.Data0x8601.AreaIds>}
 */
proto.Data0x8601.prototype.getAreaidsList = function() {
  return /** @type{!Array<!proto.Data0x8601.AreaIds>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Data0x8601.AreaIds, 4));
};


/** @param {!Array<!proto.Data0x8601.AreaIds>} value */
proto.Data0x8601.prototype.setAreaidsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Data0x8601.AreaIds=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Data0x8601.AreaIds}
 */
proto.Data0x8601.prototype.addAreaids = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Data0x8601.AreaIds, opt_index);
};


proto.Data0x8601.prototype.clearAreaidsList = function() {
  this.setAreaidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8602 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Data0x8602.repeatedFields_, null);
};
goog.inherits(proto.Data0x8602, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8602.displayName = 'proto.Data0x8602';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Data0x8602.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8602.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8602.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8602} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8602.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    areasList: jspb.Message.toObjectList(msg.getAreasList(),
    proto.Data0x8602.Areas.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8602}
 */
proto.Data0x8602.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8602;
  return proto.Data0x8602.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8602} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8602}
 */
proto.Data0x8602.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 5:
      var value = new proto.Data0x8602.Areas;
      reader.readMessage(value,proto.Data0x8602.Areas.deserializeBinaryFromReader);
      msg.addAreas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8602.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8602.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8602} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8602.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAreasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Data0x8602.Areas.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8602.Areas = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8602.Areas, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8602.Areas.displayName = 'proto.Data0x8602.Areas';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8602.Areas.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8602.Areas.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8602.Areas} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8602.Areas.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    flag: (f = msg.getFlag()) && proto.Data0x8602.Areas.Flag.toObject(includeInstance, f),
    leftlatitude: jspb.Message.getFieldWithDefault(msg, 3, ""),
    leftlongitude: jspb.Message.getFieldWithDefault(msg, 4, ""),
    rightlatitude: jspb.Message.getFieldWithDefault(msg, 5, ""),
    rightlongitude: jspb.Message.getFieldWithDefault(msg, 6, ""),
    starttime: jspb.Message.getFieldWithDefault(msg, 7, ""),
    endtime: jspb.Message.getFieldWithDefault(msg, 8, ""),
    maxspeed: jspb.Message.getFieldWithDefault(msg, 9, 0),
    overspeedduration: jspb.Message.getFieldWithDefault(msg, 10, 0),
    topspeedatnight: jspb.Message.getFieldWithDefault(msg, 11, ""),
    areaname: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8602.Areas}
 */
proto.Data0x8602.Areas.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8602.Areas;
  return proto.Data0x8602.Areas.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8602.Areas} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8602.Areas}
 */
proto.Data0x8602.Areas.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.Data0x8602.Areas.Flag;
      reader.readMessage(value,proto.Data0x8602.Areas.Flag.deserializeBinaryFromReader);
      msg.setFlag(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeftlatitude(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeftlongitude(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRightlatitude(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRightlongitude(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndtime(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxspeed(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOverspeedduration(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopspeedatnight(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setAreaname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8602.Areas.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8602.Areas.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8602.Areas} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8602.Areas.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFlag();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Data0x8602.Areas.Flag.serializeBinaryToWriter
    );
  }
  f = message.getLeftlatitude();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLeftlongitude();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRightlatitude();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRightlongitude();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getEndtime();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMaxspeed();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getOverspeedduration();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getTopspeedatnight();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getAreaname();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8602.Areas.Flag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8602.Areas.Flag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8602.Areas.Flag.displayName = 'proto.Data0x8602.Areas.Flag';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8602.Areas.Flag.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8602.Areas.Flag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8602.Areas.Flag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8602.Areas.Flag.toObject = function(includeInstance, msg) {
  var f, obj = {
    accordingtotime: jspb.Message.getFieldWithDefault(msg, 1, false),
    speedlimit: jspb.Message.getFieldWithDefault(msg, 2, false),
    inareatodriver: jspb.Message.getFieldWithDefault(msg, 3, false),
    enterareatoplatform: jspb.Message.getFieldWithDefault(msg, 4, false),
    outofareaalarmthedriver: jspb.Message.getFieldWithDefault(msg, 5, false),
    outofareaalarmtheplatform: jspb.Message.getFieldWithDefault(msg, 6, false),
    dimensions: jspb.Message.getFieldWithDefault(msg, 7, false),
    longitude: jspb.Message.getFieldWithDefault(msg, 8, false),
    isopenthedoor: jspb.Message.getFieldWithDefault(msg, 9, false),
    isopencommodel: jspb.Message.getFieldWithDefault(msg, 10, false),
    iscollectgnssdata: jspb.Message.getFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8602.Areas.Flag}
 */
proto.Data0x8602.Areas.Flag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8602.Areas.Flag;
  return proto.Data0x8602.Areas.Flag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8602.Areas.Flag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8602.Areas.Flag}
 */
proto.Data0x8602.Areas.Flag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAccordingtotime(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSpeedlimit(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInareatodriver(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnterareatoplatform(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutofareaalarmthedriver(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutofareaalarmtheplatform(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDimensions(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLongitude(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsopenthedoor(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsopencommodel(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscollectgnssdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8602.Areas.Flag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8602.Areas.Flag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8602.Areas.Flag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8602.Areas.Flag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccordingtotime();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSpeedlimit();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getInareatodriver();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getEnterareatoplatform();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getOutofareaalarmthedriver();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getOutofareaalarmtheplatform();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDimensions();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLongitude();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getIsopenthedoor();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIsopencommodel();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getIscollectgnssdata();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional bool accordingToTime = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8602.Areas.Flag.prototype.getAccordingtotime = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.Data0x8602.Areas.Flag.prototype.setAccordingtotime = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool speedLimit = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8602.Areas.Flag.prototype.getSpeedlimit = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Data0x8602.Areas.Flag.prototype.setSpeedlimit = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool inAreaToDriver = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8602.Areas.Flag.prototype.getInareatodriver = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Data0x8602.Areas.Flag.prototype.setInareatodriver = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool enterAreaToPlatform = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8602.Areas.Flag.prototype.getEnterareatoplatform = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.Data0x8602.Areas.Flag.prototype.setEnterareatoplatform = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool outOfAreaAlarmTheDriver = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8602.Areas.Flag.prototype.getOutofareaalarmthedriver = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.Data0x8602.Areas.Flag.prototype.setOutofareaalarmthedriver = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool outOfAreaAlarmThePlatform = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8602.Areas.Flag.prototype.getOutofareaalarmtheplatform = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.Data0x8602.Areas.Flag.prototype.setOutofareaalarmtheplatform = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool dimensions = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8602.Areas.Flag.prototype.getDimensions = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.Data0x8602.Areas.Flag.prototype.setDimensions = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool longitude = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8602.Areas.Flag.prototype.getLongitude = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.Data0x8602.Areas.Flag.prototype.setLongitude = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool isOpenTheDoor = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8602.Areas.Flag.prototype.getIsopenthedoor = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.Data0x8602.Areas.Flag.prototype.setIsopenthedoor = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool isOpenComModel = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8602.Areas.Flag.prototype.getIsopencommodel = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.Data0x8602.Areas.Flag.prototype.setIsopencommodel = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool isCollectGNSSData = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8602.Areas.Flag.prototype.getIscollectgnssdata = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.Data0x8602.Areas.Flag.prototype.setIscollectgnssdata = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Data0x8602.Areas.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8602.Areas.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Flag flag = 2;
 * @return {?proto.Data0x8602.Areas.Flag}
 */
proto.Data0x8602.Areas.prototype.getFlag = function() {
  return /** @type{?proto.Data0x8602.Areas.Flag} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8602.Areas.Flag, 2));
};


/** @param {?proto.Data0x8602.Areas.Flag|undefined} value */
proto.Data0x8602.Areas.prototype.setFlag = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Data0x8602.Areas.prototype.clearFlag = function() {
  this.setFlag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Data0x8602.Areas.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string leftLatitude = 3;
 * @return {string}
 */
proto.Data0x8602.Areas.prototype.getLeftlatitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8602.Areas.prototype.setLeftlatitude = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string leftLongitude = 4;
 * @return {string}
 */
proto.Data0x8602.Areas.prototype.getLeftlongitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Data0x8602.Areas.prototype.setLeftlongitude = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string rightLatitude = 5;
 * @return {string}
 */
proto.Data0x8602.Areas.prototype.getRightlatitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Data0x8602.Areas.prototype.setRightlatitude = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string rightLongitude = 6;
 * @return {string}
 */
proto.Data0x8602.Areas.prototype.getRightlongitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Data0x8602.Areas.prototype.setRightlongitude = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string startTime = 7;
 * @return {string}
 */
proto.Data0x8602.Areas.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Data0x8602.Areas.prototype.setStarttime = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string endTime = 8;
 * @return {string}
 */
proto.Data0x8602.Areas.prototype.getEndtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Data0x8602.Areas.prototype.setEndtime = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 maxSpeed = 9;
 * @return {number}
 */
proto.Data0x8602.Areas.prototype.getMaxspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.Data0x8602.Areas.prototype.setMaxspeed = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 overSpeedDuration = 10;
 * @return {number}
 */
proto.Data0x8602.Areas.prototype.getOverspeedduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.Data0x8602.Areas.prototype.setOverspeedduration = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string topSpeedAtNight = 11;
 * @return {string}
 */
proto.Data0x8602.Areas.prototype.getTopspeedatnight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.Data0x8602.Areas.prototype.setTopspeedatnight = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string areaName = 12;
 * @return {string}
 */
proto.Data0x8602.Areas.prototype.getAreaname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.Data0x8602.Areas.prototype.setAreaname = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string msgId = 1;
 * @return {string}
 */
proto.Data0x8602.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Data0x8602.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string terminalPhone = 2;
 * @return {string}
 */
proto.Data0x8602.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8602.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string mainRoleId = 3;
 * @return {string}
 */
proto.Data0x8602.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8602.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 type = 4;
 * @return {number}
 */
proto.Data0x8602.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Data0x8602.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated Areas areas = 5;
 * @return {!Array<!proto.Data0x8602.Areas>}
 */
proto.Data0x8602.prototype.getAreasList = function() {
  return /** @type{!Array<!proto.Data0x8602.Areas>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Data0x8602.Areas, 5));
};


/** @param {!Array<!proto.Data0x8602.Areas>} value */
proto.Data0x8602.prototype.setAreasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Data0x8602.Areas=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Data0x8602.Areas}
 */
proto.Data0x8602.prototype.addAreas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Data0x8602.Areas, opt_index);
};


proto.Data0x8602.prototype.clearAreasList = function() {
  this.setAreasList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8604 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Data0x8604.repeatedFields_, null);
};
goog.inherits(proto.Data0x8604, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8604.displayName = 'proto.Data0x8604';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Data0x8604.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8604.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8604.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8604} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8604.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    flag: (f = msg.getFlag()) && proto.Data0x8604.Flag.toObject(includeInstance, f),
    starttime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    endtime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    maxspeed: jspb.Message.getFieldWithDefault(msg, 5, 0),
    overspeedduration: jspb.Message.getFieldWithDefault(msg, 6, 0),
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.Data0x8604.Points.toObject, includeInstance),
    msgid: jspb.Message.getFieldWithDefault(msg, 8, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 9, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 10, ""),
    topspeedatnight: jspb.Message.getFieldWithDefault(msg, 11, ""),
    areaname: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8604}
 */
proto.Data0x8604.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8604;
  return proto.Data0x8604.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8604} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8604}
 */
proto.Data0x8604.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.Data0x8604.Flag;
      reader.readMessage(value,proto.Data0x8604.Flag.deserializeBinaryFromReader);
      msg.setFlag(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndtime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxspeed(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOverspeedduration(value);
      break;
    case 7:
      var value = new proto.Data0x8604.Points;
      reader.readMessage(value,proto.Data0x8604.Points.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopspeedatnight(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setAreaname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8604.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8604.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8604} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8604.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFlag();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Data0x8604.Flag.serializeBinaryToWriter
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEndtime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMaxspeed();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getOverspeedduration();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.Data0x8604.Points.serializeBinaryToWriter
    );
  }
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTopspeedatnight();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getAreaname();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8604.Points = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8604.Points, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8604.Points.displayName = 'proto.Data0x8604.Points';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8604.Points.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8604.Points.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8604.Points} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8604.Points.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: jspb.Message.getFieldWithDefault(msg, 3, ""),
    longitude: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8604.Points}
 */
proto.Data0x8604.Points.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8604.Points;
  return proto.Data0x8604.Points.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8604.Points} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8604.Points}
 */
proto.Data0x8604.Points.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatitude(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8604.Points.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8604.Points.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8604.Points} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8604.Points.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLongitude();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string latitude = 3;
 * @return {string}
 */
proto.Data0x8604.Points.prototype.getLatitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8604.Points.prototype.setLatitude = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string longitude = 4;
 * @return {string}
 */
proto.Data0x8604.Points.prototype.getLongitude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Data0x8604.Points.prototype.setLongitude = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8604.Flag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8604.Flag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8604.Flag.displayName = 'proto.Data0x8604.Flag';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8604.Flag.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8604.Flag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8604.Flag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8604.Flag.toObject = function(includeInstance, msg) {
  var f, obj = {
    accordingtotime: jspb.Message.getFieldWithDefault(msg, 1, false),
    speedlimit: jspb.Message.getFieldWithDefault(msg, 2, false),
    inareatodriver: jspb.Message.getFieldWithDefault(msg, 3, false),
    enterareatoplatform: jspb.Message.getFieldWithDefault(msg, 4, false),
    outofareaalarmthedriver: jspb.Message.getFieldWithDefault(msg, 5, false),
    outofareaalarmtheplatform: jspb.Message.getFieldWithDefault(msg, 6, false),
    dimensions: jspb.Message.getFieldWithDefault(msg, 7, false),
    longitude: jspb.Message.getFieldWithDefault(msg, 8, false),
    isopenthedoor: jspb.Message.getFieldWithDefault(msg, 9, false),
    isopencommodel: jspb.Message.getFieldWithDefault(msg, 10, false),
    iscollectgnssdata: jspb.Message.getFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8604.Flag}
 */
proto.Data0x8604.Flag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8604.Flag;
  return proto.Data0x8604.Flag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8604.Flag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8604.Flag}
 */
proto.Data0x8604.Flag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAccordingtotime(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSpeedlimit(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInareatodriver(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnterareatoplatform(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutofareaalarmthedriver(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutofareaalarmtheplatform(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDimensions(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLongitude(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsopenthedoor(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsopencommodel(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscollectgnssdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8604.Flag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8604.Flag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8604.Flag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8604.Flag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccordingtotime();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSpeedlimit();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getInareatodriver();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getEnterareatoplatform();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getOutofareaalarmthedriver();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getOutofareaalarmtheplatform();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDimensions();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLongitude();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getIsopenthedoor();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIsopencommodel();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getIscollectgnssdata();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional bool accordingToTime = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8604.Flag.prototype.getAccordingtotime = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.Data0x8604.Flag.prototype.setAccordingtotime = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool speedLimit = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8604.Flag.prototype.getSpeedlimit = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Data0x8604.Flag.prototype.setSpeedlimit = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool inAreaToDriver = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8604.Flag.prototype.getInareatodriver = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Data0x8604.Flag.prototype.setInareatodriver = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool enterAreaToPlatform = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8604.Flag.prototype.getEnterareatoplatform = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.Data0x8604.Flag.prototype.setEnterareatoplatform = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool outOfAreaAlarmTheDriver = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8604.Flag.prototype.getOutofareaalarmthedriver = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.Data0x8604.Flag.prototype.setOutofareaalarmthedriver = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool outOfAreaAlarmThePlatform = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8604.Flag.prototype.getOutofareaalarmtheplatform = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.Data0x8604.Flag.prototype.setOutofareaalarmtheplatform = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool dimensions = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8604.Flag.prototype.getDimensions = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.Data0x8604.Flag.prototype.setDimensions = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool longitude = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8604.Flag.prototype.getLongitude = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.Data0x8604.Flag.prototype.setLongitude = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool isOpenTheDoor = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8604.Flag.prototype.getIsopenthedoor = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.Data0x8604.Flag.prototype.setIsopenthedoor = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool isOpenComModel = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8604.Flag.prototype.getIsopencommodel = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.Data0x8604.Flag.prototype.setIsopencommodel = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool isCollectGNSSData = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8604.Flag.prototype.getIscollectgnssdata = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.Data0x8604.Flag.prototype.setIscollectgnssdata = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Data0x8604.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Data0x8604.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Flag flag = 2;
 * @return {?proto.Data0x8604.Flag}
 */
proto.Data0x8604.prototype.getFlag = function() {
  return /** @type{?proto.Data0x8604.Flag} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8604.Flag, 2));
};


/** @param {?proto.Data0x8604.Flag|undefined} value */
proto.Data0x8604.prototype.setFlag = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Data0x8604.prototype.clearFlag = function() {
  this.setFlag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Data0x8604.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string startTime = 3;
 * @return {string}
 */
proto.Data0x8604.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8604.prototype.setStarttime = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string endTime = 4;
 * @return {string}
 */
proto.Data0x8604.prototype.getEndtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Data0x8604.prototype.setEndtime = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 maxSpeed = 5;
 * @return {number}
 */
proto.Data0x8604.prototype.getMaxspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Data0x8604.prototype.setMaxspeed = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 overSpeedDuration = 6;
 * @return {number}
 */
proto.Data0x8604.prototype.getOverspeedduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Data0x8604.prototype.setOverspeedduration = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated Points points = 7;
 * @return {!Array<!proto.Data0x8604.Points>}
 */
proto.Data0x8604.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.Data0x8604.Points>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Data0x8604.Points, 7));
};


/** @param {!Array<!proto.Data0x8604.Points>} value */
proto.Data0x8604.prototype.setPointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.Data0x8604.Points=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Data0x8604.Points}
 */
proto.Data0x8604.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.Data0x8604.Points, opt_index);
};


proto.Data0x8604.prototype.clearPointsList = function() {
  this.setPointsList([]);
};


/**
 * optional string msgId = 8;
 * @return {string}
 */
proto.Data0x8604.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Data0x8604.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string terminalPhone = 9;
 * @return {string}
 */
proto.Data0x8604.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Data0x8604.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string mainRoleId = 10;
 * @return {string}
 */
proto.Data0x8604.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Data0x8604.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string topSpeedAtNight = 11;
 * @return {string}
 */
proto.Data0x8604.prototype.getTopspeedatnight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.Data0x8604.prototype.setTopspeedatnight = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string areaName = 12;
 * @return {string}
 */
proto.Data0x8604.prototype.getAreaname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.Data0x8604.prototype.setAreaname = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8606 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Data0x8606.repeatedFields_, null);
};
goog.inherits(proto.Data0x8606, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8606.displayName = 'proto.Data0x8606';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Data0x8606.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8606.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8606.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8606} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8606.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    flag: (f = msg.getFlag()) && proto.Data0x8606.Flag.toObject(includeInstance, f),
    starttime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    endtime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.Data0x8606.Points.toObject, includeInstance),
    msgid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 7, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 8, ""),
    areaname: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8606}
 */
proto.Data0x8606.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8606;
  return proto.Data0x8606.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8606} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8606}
 */
proto.Data0x8606.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.Data0x8606.Flag;
      reader.readMessage(value,proto.Data0x8606.Flag.deserializeBinaryFromReader);
      msg.setFlag(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndtime(value);
      break;
    case 5:
      var value = new proto.Data0x8606.Points;
      reader.readMessage(value,proto.Data0x8606.Points.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAreaname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8606.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8606.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8606} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8606.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFlag();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Data0x8606.Flag.serializeBinaryToWriter
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEndtime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Data0x8606.Points.serializeBinaryToWriter
    );
  }
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAreaname();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8606.Flag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8606.Flag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8606.Flag.displayName = 'proto.Data0x8606.Flag';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8606.Flag.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8606.Flag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8606.Flag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8606.Flag.toObject = function(includeInstance, msg) {
  var f, obj = {
    accordingtotime: jspb.Message.getFieldWithDefault(msg, 1, false),
    enteralarmtodriver: jspb.Message.getFieldWithDefault(msg, 2, false),
    enteralarmtoplatform: jspb.Message.getFieldWithDefault(msg, 3, false),
    outalarmtodriver: jspb.Message.getFieldWithDefault(msg, 4, false),
    outalarmtoplatform: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8606.Flag}
 */
proto.Data0x8606.Flag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8606.Flag;
  return proto.Data0x8606.Flag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8606.Flag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8606.Flag}
 */
proto.Data0x8606.Flag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAccordingtotime(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnteralarmtodriver(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnteralarmtoplatform(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutalarmtodriver(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutalarmtoplatform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8606.Flag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8606.Flag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8606.Flag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8606.Flag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccordingtotime();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getEnteralarmtodriver();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEnteralarmtoplatform();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getOutalarmtodriver();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getOutalarmtoplatform();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bool accordingToTime = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8606.Flag.prototype.getAccordingtotime = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.Data0x8606.Flag.prototype.setAccordingtotime = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool enterAlarmToDriver = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8606.Flag.prototype.getEnteralarmtodriver = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Data0x8606.Flag.prototype.setEnteralarmtodriver = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool enterAlarmToPlatform = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8606.Flag.prototype.getEnteralarmtoplatform = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Data0x8606.Flag.prototype.setEnteralarmtoplatform = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool outAlarmToDriver = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8606.Flag.prototype.getOutalarmtodriver = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.Data0x8606.Flag.prototype.setOutalarmtodriver = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool outAlarmToPlatform = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8606.Flag.prototype.getOutalarmtoplatform = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.Data0x8606.Flag.prototype.setOutalarmtoplatform = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8606.Points = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8606.Points, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8606.Points.displayName = 'proto.Data0x8606.Points';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8606.Points.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8606.Points.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8606.Points} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8606.Points.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pathid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pointlat: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pointlng: jspb.Message.getFieldWithDefault(msg, 4, ""),
    width: jspb.Message.getFieldWithDefault(msg, 5, ""),
    attrib: (f = msg.getAttrib()) && proto.Data0x8606.Points.Attrib.toObject(includeInstance, f),
    passed: jspb.Message.getFieldWithDefault(msg, 7, ""),
    uncovered: jspb.Message.getFieldWithDefault(msg, 8, ""),
    maxspeed: jspb.Message.getFieldWithDefault(msg, 9, ""),
    overspeedduration: jspb.Message.getFieldWithDefault(msg, 10, ""),
    topspeedatnight: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8606.Points}
 */
proto.Data0x8606.Points.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8606.Points;
  return proto.Data0x8606.Points.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8606.Points} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8606.Points}
 */
proto.Data0x8606.Points.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPointid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPointlat(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPointlng(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWidth(value);
      break;
    case 6:
      var value = new proto.Data0x8606.Points.Attrib;
      reader.readMessage(value,proto.Data0x8606.Points.Attrib.deserializeBinaryFromReader);
      msg.setAttrib(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassed(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUncovered(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxspeed(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOverspeedduration(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopspeedatnight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8606.Points.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8606.Points.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8606.Points} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8606.Points.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPathid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPointlat();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPointlng();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWidth();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAttrib();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Data0x8606.Points.Attrib.serializeBinaryToWriter
    );
  }
  f = message.getPassed();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUncovered();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMaxspeed();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getOverspeedduration();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTopspeedatnight();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8606.Points.Attrib = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8606.Points.Attrib, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8606.Points.Attrib.displayName = 'proto.Data0x8606.Points.Attrib';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8606.Points.Attrib.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8606.Points.Attrib.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8606.Points.Attrib} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8606.Points.Attrib.toObject = function(includeInstance, msg) {
  var f, obj = {
    traveltime: jspb.Message.getFieldWithDefault(msg, 1, false),
    speedlimit: jspb.Message.getFieldWithDefault(msg, 2, false),
    latitude: jspb.Message.getFieldWithDefault(msg, 3, false),
    longitude: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8606.Points.Attrib}
 */
proto.Data0x8606.Points.Attrib.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8606.Points.Attrib;
  return proto.Data0x8606.Points.Attrib.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8606.Points.Attrib} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8606.Points.Attrib}
 */
proto.Data0x8606.Points.Attrib.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTraveltime(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSpeedlimit(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLatitude(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8606.Points.Attrib.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8606.Points.Attrib.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8606.Points.Attrib} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8606.Points.Attrib.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraveltime();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSpeedlimit();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getLatitude();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getLongitude();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bool travelTime = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8606.Points.Attrib.prototype.getTraveltime = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.Data0x8606.Points.Attrib.prototype.setTraveltime = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool speedLimit = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8606.Points.Attrib.prototype.getSpeedlimit = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Data0x8606.Points.Attrib.prototype.setSpeedlimit = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool latitude = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8606.Points.Attrib.prototype.getLatitude = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Data0x8606.Points.Attrib.prototype.setLatitude = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool longitude = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8606.Points.Attrib.prototype.getLongitude = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.Data0x8606.Points.Attrib.prototype.setLongitude = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string pointId = 1;
 * @return {string}
 */
proto.Data0x8606.Points.prototype.getPointid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Data0x8606.Points.prototype.setPointid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pathId = 2;
 * @return {string}
 */
proto.Data0x8606.Points.prototype.getPathid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8606.Points.prototype.setPathid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string pointLat = 3;
 * @return {string}
 */
proto.Data0x8606.Points.prototype.getPointlat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8606.Points.prototype.setPointlat = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string pointLng = 4;
 * @return {string}
 */
proto.Data0x8606.Points.prototype.getPointlng = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Data0x8606.Points.prototype.setPointlng = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string width = 5;
 * @return {string}
 */
proto.Data0x8606.Points.prototype.getWidth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Data0x8606.Points.prototype.setWidth = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Attrib attrib = 6;
 * @return {?proto.Data0x8606.Points.Attrib}
 */
proto.Data0x8606.Points.prototype.getAttrib = function() {
  return /** @type{?proto.Data0x8606.Points.Attrib} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8606.Points.Attrib, 6));
};


/** @param {?proto.Data0x8606.Points.Attrib|undefined} value */
proto.Data0x8606.Points.prototype.setAttrib = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.Data0x8606.Points.prototype.clearAttrib = function() {
  this.setAttrib(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Data0x8606.Points.prototype.hasAttrib = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string passed = 7;
 * @return {string}
 */
proto.Data0x8606.Points.prototype.getPassed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Data0x8606.Points.prototype.setPassed = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string uncovered = 8;
 * @return {string}
 */
proto.Data0x8606.Points.prototype.getUncovered = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Data0x8606.Points.prototype.setUncovered = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string maxSpeed = 9;
 * @return {string}
 */
proto.Data0x8606.Points.prototype.getMaxspeed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Data0x8606.Points.prototype.setMaxspeed = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string overSpeedDuration = 10;
 * @return {string}
 */
proto.Data0x8606.Points.prototype.getOverspeedduration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Data0x8606.Points.prototype.setOverspeedduration = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string topSpeedAtNight = 11;
 * @return {string}
 */
proto.Data0x8606.Points.prototype.getTopspeedatnight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.Data0x8606.Points.prototype.setTopspeedatnight = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Data0x8606.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Data0x8606.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Flag flag = 2;
 * @return {?proto.Data0x8606.Flag}
 */
proto.Data0x8606.prototype.getFlag = function() {
  return /** @type{?proto.Data0x8606.Flag} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8606.Flag, 2));
};


/** @param {?proto.Data0x8606.Flag|undefined} value */
proto.Data0x8606.prototype.setFlag = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Data0x8606.prototype.clearFlag = function() {
  this.setFlag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Data0x8606.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string startTime = 3;
 * @return {string}
 */
proto.Data0x8606.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8606.prototype.setStarttime = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string endTime = 4;
 * @return {string}
 */
proto.Data0x8606.prototype.getEndtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Data0x8606.prototype.setEndtime = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Points points = 5;
 * @return {!Array<!proto.Data0x8606.Points>}
 */
proto.Data0x8606.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.Data0x8606.Points>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Data0x8606.Points, 5));
};


/** @param {!Array<!proto.Data0x8606.Points>} value */
proto.Data0x8606.prototype.setPointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Data0x8606.Points=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Data0x8606.Points}
 */
proto.Data0x8606.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Data0x8606.Points, opt_index);
};


proto.Data0x8606.prototype.clearPointsList = function() {
  this.setPointsList([]);
};


/**
 * optional string msgId = 6;
 * @return {string}
 */
proto.Data0x8606.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Data0x8606.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string terminalPhone = 7;
 * @return {string}
 */
proto.Data0x8606.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Data0x8606.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string mainRoleId = 8;
 * @return {string}
 */
proto.Data0x8606.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Data0x8606.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string areaName = 9;
 * @return {string}
 */
proto.Data0x8606.prototype.getAreaname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Data0x8606.prototype.setAreaname = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8700 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8700, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8700.displayName = 'proto.Data0x8700';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8700.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8700.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8700} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8700.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getFieldWithDefault(msg, 1, 0),
    param: jspb.Message.getFieldWithDefault(msg, 2, ""),
    msgid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 4, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8700}
 */
proto.Data0x8700.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8700;
  return proto.Data0x8700.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8700} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8700}
 */
proto.Data0x8700.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setParam(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8700.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8700.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8700} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8700.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getParam();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 command = 1;
 * @return {number}
 */
proto.Data0x8700.prototype.getCommand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8700.prototype.setCommand = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string param = 2;
 * @return {string}
 */
proto.Data0x8700.prototype.getParam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8700.prototype.setParam = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string msgId = 3;
 * @return {string}
 */
proto.Data0x8700.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8700.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string terminalPhone = 4;
 * @return {string}
 */
proto.Data0x8700.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Data0x8700.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string mainRoleId = 5;
 * @return {string}
 */
proto.Data0x8700.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Data0x8700.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8800 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Data0x8800.repeatedFields_, null);
};
goog.inherits(proto.Data0x8800, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8800.displayName = 'proto.Data0x8800';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Data0x8800.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8800.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8800.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8800} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8800.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mmid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    idsList: jspb.Message.toObjectList(msg.getIdsList(),
    proto.Data0x8800.Ids.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8800}
 */
proto.Data0x8800.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8800;
  return proto.Data0x8800.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8800} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8800}
 */
proto.Data0x8800.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMmid(value);
      break;
    case 5:
      var value = new proto.Data0x8800.Ids;
      reader.readMessage(value,proto.Data0x8800.Ids.deserializeBinaryFromReader);
      msg.addIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8800.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8800.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8800} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8800.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMmid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Data0x8800.Ids.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8800.Ids = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8800.Ids, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8800.Ids.displayName = 'proto.Data0x8800.Ids';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8800.Ids.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8800.Ids.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8800.Ids} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8800.Ids.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8800.Ids}
 */
proto.Data0x8800.Ids.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8800.Ids;
  return proto.Data0x8800.Ids.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8800.Ids} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8800.Ids}
 */
proto.Data0x8800.Ids.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8800.Ids.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8800.Ids.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8800.Ids} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8800.Ids.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Data0x8800.Ids.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8800.Ids.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string msgId = 1;
 * @return {string}
 */
proto.Data0x8800.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Data0x8800.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string terminalPhone = 2;
 * @return {string}
 */
proto.Data0x8800.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8800.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string mainRoleId = 3;
 * @return {string}
 */
proto.Data0x8800.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8800.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string mmId = 4;
 * @return {string}
 */
proto.Data0x8800.prototype.getMmid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Data0x8800.prototype.setMmid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Ids ids = 5;
 * @return {!Array<!proto.Data0x8800.Ids>}
 */
proto.Data0x8800.prototype.getIdsList = function() {
  return /** @type{!Array<!proto.Data0x8800.Ids>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Data0x8800.Ids, 5));
};


/** @param {!Array<!proto.Data0x8800.Ids>} value */
proto.Data0x8800.prototype.setIdsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Data0x8800.Ids=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Data0x8800.Ids}
 */
proto.Data0x8800.prototype.addIds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Data0x8800.Ids, opt_index);
};


proto.Data0x8800.prototype.clearIdsList = function() {
  this.setIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8801 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8801, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8801.displayName = 'proto.Data0x8801';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8801.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8801.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8801} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8801.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    command: jspb.Message.getFieldWithDefault(msg, 2, 0),
    period: jspb.Message.getFieldWithDefault(msg, 3, 0),
    save: jspb.Message.getFieldWithDefault(msg, 4, 0),
    resolution: jspb.Message.getFieldWithDefault(msg, 5, ""),
    quality: jspb.Message.getFieldWithDefault(msg, 6, 0),
    bright: jspb.Message.getFieldWithDefault(msg, 7, 0),
    contrast: jspb.Message.getFieldWithDefault(msg, 8, 0),
    saturate: jspb.Message.getFieldWithDefault(msg, 9, 0),
    chromaticity: jspb.Message.getFieldWithDefault(msg, 10, 0),
    msgid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 12, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8801}
 */
proto.Data0x8801.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8801;
  return proto.Data0x8801.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8801} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8801}
 */
proto.Data0x8801.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannelid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommand(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeriod(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSave(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setResolution(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuality(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBright(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContrast(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSaturate(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChromaticity(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8801.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8801.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8801} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8801.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCommand();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSave();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getResolution();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getQuality();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getBright();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getContrast();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getSaturate();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getChromaticity();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional int32 channelId = 1;
 * @return {number}
 */
proto.Data0x8801.prototype.getChannelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8801.prototype.setChannelid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 command = 2;
 * @return {number}
 */
proto.Data0x8801.prototype.getCommand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Data0x8801.prototype.setCommand = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 period = 3;
 * @return {number}
 */
proto.Data0x8801.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Data0x8801.prototype.setPeriod = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 save = 4;
 * @return {number}
 */
proto.Data0x8801.prototype.getSave = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Data0x8801.prototype.setSave = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string resolution = 5;
 * @return {string}
 */
proto.Data0x8801.prototype.getResolution = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Data0x8801.prototype.setResolution = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 quality = 6;
 * @return {number}
 */
proto.Data0x8801.prototype.getQuality = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Data0x8801.prototype.setQuality = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 bright = 7;
 * @return {number}
 */
proto.Data0x8801.prototype.getBright = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Data0x8801.prototype.setBright = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 contrast = 8;
 * @return {number}
 */
proto.Data0x8801.prototype.getContrast = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.Data0x8801.prototype.setContrast = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 saturate = 9;
 * @return {number}
 */
proto.Data0x8801.prototype.getSaturate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.Data0x8801.prototype.setSaturate = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 chromaticity = 10;
 * @return {number}
 */
proto.Data0x8801.prototype.getChromaticity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.Data0x8801.prototype.setChromaticity = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string msgId = 11;
 * @return {string}
 */
proto.Data0x8801.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.Data0x8801.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string terminalPhone = 12;
 * @return {string}
 */
proto.Data0x8801.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.Data0x8801.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string mainRoleId = 13;
 * @return {string}
 */
proto.Data0x8801.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.Data0x8801.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8802 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8802, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8802.displayName = 'proto.Data0x8802';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8802.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8802.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8802} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8802.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channelid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    eventcode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    starttime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    endtime: jspb.Message.getFieldWithDefault(msg, 5, ""),
    msgid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 7, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8802}
 */
proto.Data0x8802.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8802;
  return proto.Data0x8802.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8802} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8802}
 */
proto.Data0x8802.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannelid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventcode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndtime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8802.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8802.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8802} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8802.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getChannelid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEventcode();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEndtime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.Data0x8802.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8802.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 channelId = 2;
 * @return {number}
 */
proto.Data0x8802.prototype.getChannelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Data0x8802.prototype.setChannelid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 eventCode = 3;
 * @return {number}
 */
proto.Data0x8802.prototype.getEventcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Data0x8802.prototype.setEventcode = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string startTime = 4;
 * @return {string}
 */
proto.Data0x8802.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Data0x8802.prototype.setStarttime = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string endTime = 5;
 * @return {string}
 */
proto.Data0x8802.prototype.getEndtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Data0x8802.prototype.setEndtime = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string msgId = 6;
 * @return {string}
 */
proto.Data0x8802.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Data0x8802.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string terminalPhone = 7;
 * @return {string}
 */
proto.Data0x8802.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Data0x8802.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string mainRoleId = 8;
 * @return {string}
 */
proto.Data0x8802.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Data0x8802.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8803 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8803, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8803.displayName = 'proto.Data0x8803';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8803.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8803.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8803} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8803.toObject = function(includeInstance, msg) {
  var f, obj = {
    mediatype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    eventnumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    starttime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    endtime: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isdelete: jspb.Message.getFieldWithDefault(msg, 6, 0),
    msgid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 8, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8803}
 */
proto.Data0x8803.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8803;
  return proto.Data0x8803.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8803} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8803}
 */
proto.Data0x8803.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMediatype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventnumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndtime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsdelete(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8803.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8803.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8803} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8803.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMediatype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEventnumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEndtime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsdelete();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int32 mediaType = 1;
 * @return {number}
 */
proto.Data0x8803.prototype.getMediatype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8803.prototype.setMediatype = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 channel = 2;
 * @return {number}
 */
proto.Data0x8803.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Data0x8803.prototype.setChannel = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 eventNumber = 3;
 * @return {number}
 */
proto.Data0x8803.prototype.getEventnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Data0x8803.prototype.setEventnumber = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string startTime = 4;
 * @return {string}
 */
proto.Data0x8803.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Data0x8803.prototype.setStarttime = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string endTime = 5;
 * @return {string}
 */
proto.Data0x8803.prototype.getEndtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Data0x8803.prototype.setEndtime = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 isDelete = 6;
 * @return {number}
 */
proto.Data0x8803.prototype.getIsdelete = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Data0x8803.prototype.setIsdelete = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string msgId = 7;
 * @return {string}
 */
proto.Data0x8803.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Data0x8803.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string terminalPhone = 8;
 * @return {string}
 */
proto.Data0x8803.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Data0x8803.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string mainRoleId = 9;
 * @return {string}
 */
proto.Data0x8803.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Data0x8803.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8804 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8804, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8804.displayName = 'proto.Data0x8804';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8804.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8804.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8804} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8804.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getFieldWithDefault(msg, 1, 0),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0),
    save: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    msgid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8804}
 */
proto.Data0x8804.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8804;
  return proto.Data0x8804.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8804} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8804}
 */
proto.Data0x8804.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSave(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8804.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8804.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8804} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8804.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSave();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getRate();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int32 command = 1;
 * @return {number}
 */
proto.Data0x8804.prototype.getCommand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8804.prototype.setCommand = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 time = 2;
 * @return {number}
 */
proto.Data0x8804.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Data0x8804.prototype.setTime = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 save = 3;
 * @return {number}
 */
proto.Data0x8804.prototype.getSave = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Data0x8804.prototype.setSave = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 rate = 4;
 * @return {number}
 */
proto.Data0x8804.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Data0x8804.prototype.setRate = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string msgId = 5;
 * @return {string}
 */
proto.Data0x8804.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Data0x8804.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string terminalPhone = 6;
 * @return {string}
 */
proto.Data0x8804.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Data0x8804.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string mainRoleId = 7;
 * @return {string}
 */
proto.Data0x8804.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Data0x8804.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8805 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8805, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8805.displayName = 'proto.Data0x8805';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8805.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8805.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8805} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8805.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    flag: jspb.Message.getFieldWithDefault(msg, 2, 0),
    msgid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 4, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8805}
 */
proto.Data0x8805.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8805;
  return proto.Data0x8805.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8805} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8805}
 */
proto.Data0x8805.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlag(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8805.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8805.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8805} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8805.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFlag();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Data0x8805.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Data0x8805.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 flag = 2;
 * @return {number}
 */
proto.Data0x8805.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Data0x8805.prototype.setFlag = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string msgId = 3;
 * @return {string}
 */
proto.Data0x8805.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8805.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string terminalPhone = 4;
 * @return {string}
 */
proto.Data0x8805.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Data0x8805.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string mainRoleId = 5;
 * @return {string}
 */
proto.Data0x8805.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Data0x8805.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8900 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8900, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8900.displayName = 'proto.Data0x8900';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8900.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8900.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8900} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8900.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: jspb.Message.getFieldWithDefault(msg, 2, ""),
    msgid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 4, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8900}
 */
proto.Data0x8900.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8900;
  return proto.Data0x8900.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8900} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8900}
 */
proto.Data0x8900.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8900.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8900.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8900} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8900.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.Data0x8900.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8900.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string data = 2;
 * @return {string}
 */
proto.Data0x8900.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8900.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string msgId = 3;
 * @return {string}
 */
proto.Data0x8900.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8900.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string terminalPhone = 4;
 * @return {string}
 */
proto.Data0x8900.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Data0x8900.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string mainRoleId = 5;
 * @return {string}
 */
proto.Data0x8900.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Data0x8900.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8A00 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8A00, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8A00.displayName = 'proto.Data0x8A00';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8A00.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8A00.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8A00} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8A00.toObject = function(includeInstance, msg) {
  var f, obj = {
    e: jspb.Message.getFieldWithDefault(msg, 1, ""),
    n: jspb.Message.getFieldWithDefault(msg, 2, ""),
    msgid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 4, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8A00}
 */
proto.Data0x8A00.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8A00;
  return proto.Data0x8A00.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8A00} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8A00}
 */
proto.Data0x8A00.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setE(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setN(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8A00.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8A00.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8A00} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8A00.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getE();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getN();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string e = 1;
 * @return {string}
 */
proto.Data0x8A00.prototype.getE = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Data0x8A00.prototype.setE = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string n = 2;
 * @return {string}
 */
proto.Data0x8A00.prototype.getN = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8A00.prototype.setN = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string msgId = 3;
 * @return {string}
 */
proto.Data0x8A00.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8A00.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string terminalPhone = 4;
 * @return {string}
 */
proto.Data0x8A00.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Data0x8A00.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string mainRoleId = 5;
 * @return {string}
 */
proto.Data0x8A00.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Data0x8A00.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8203 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8203, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8203.displayName = 'proto.Data0x8203';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8203.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8203.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8203} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8203.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    terminalphone: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mainroleid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    seq: jspb.Message.getFieldWithDefault(msg, 4, 0),
    type: (f = msg.getType()) && proto.Data0x8203.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8203}
 */
proto.Data0x8203.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8203;
  return proto.Data0x8203.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8203} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8203}
 */
proto.Data0x8203.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalphone(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainroleid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeq(value);
      break;
    case 5:
      var value = new proto.Data0x8203.Type;
      reader.readMessage(value,proto.Data0x8203.Type.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8203.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8203.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8203} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8203.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTerminalphone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMainroleid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Data0x8203.Type.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8203.Type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8203.Type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8203.Type.displayName = 'proto.Data0x8203.Type';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8203.Type.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8203.Type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8203.Type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8203.Type.toObject = function(includeInstance, msg) {
  var f, obj = {
    emergencyalarm: jspb.Message.getFieldWithDefault(msg, 1, false),
    dangerwarning: jspb.Message.getFieldWithDefault(msg, 2, false),
    alarmforentryandexitareas: jspb.Message.getFieldWithDefault(msg, 3, false),
    alarmforentryandexitroutes: jspb.Message.getFieldWithDefault(msg, 4, false),
    alarmiftoolong: jspb.Message.getFieldWithDefault(msg, 5, false),
    illegalvehicleignitionalarm: jspb.Message.getFieldWithDefault(msg, 6, false),
    vehicleillegaldisplacementalarm: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8203.Type}
 */
proto.Data0x8203.Type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8203.Type;
  return proto.Data0x8203.Type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8203.Type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8203.Type}
 */
proto.Data0x8203.Type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEmergencyalarm(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDangerwarning(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlarmforentryandexitareas(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlarmforentryandexitroutes(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlarmiftoolong(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIllegalvehicleignitionalarm(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVehicleillegaldisplacementalarm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8203.Type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8203.Type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8203.Type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8203.Type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmergencyalarm();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDangerwarning();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getAlarmforentryandexitareas();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getAlarmforentryandexitroutes();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAlarmiftoolong();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIllegalvehicleignitionalarm();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getVehicleillegaldisplacementalarm();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional bool emergencyAlarm = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8203.Type.prototype.getEmergencyalarm = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.Data0x8203.Type.prototype.setEmergencyalarm = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool dangerWarning = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8203.Type.prototype.getDangerwarning = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Data0x8203.Type.prototype.setDangerwarning = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool alarmForEntryAndExitAreas = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8203.Type.prototype.getAlarmforentryandexitareas = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Data0x8203.Type.prototype.setAlarmforentryandexitareas = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool alarmForEntryAndExitRoutes = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8203.Type.prototype.getAlarmforentryandexitroutes = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.Data0x8203.Type.prototype.setAlarmforentryandexitroutes = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool alarmIfTooLong = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8203.Type.prototype.getAlarmiftoolong = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.Data0x8203.Type.prototype.setAlarmiftoolong = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool illegalVehicleIgnitionAlarm = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8203.Type.prototype.getIllegalvehicleignitionalarm = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.Data0x8203.Type.prototype.setIllegalvehicleignitionalarm = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool vehicleIllegalDisplacementAlarm = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Data0x8203.Type.prototype.getVehicleillegaldisplacementalarm = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.Data0x8203.Type.prototype.setVehicleillegaldisplacementalarm = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string msgId = 1;
 * @return {string}
 */
proto.Data0x8203.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Data0x8203.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string terminalPhone = 2;
 * @return {string}
 */
proto.Data0x8203.prototype.getTerminalphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Data0x8203.prototype.setTerminalphone = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string mainRoleId = 3;
 * @return {string}
 */
proto.Data0x8203.prototype.getMainroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Data0x8203.prototype.setMainroleid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 seq = 4;
 * @return {number}
 */
proto.Data0x8203.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Data0x8203.prototype.setSeq = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Type type = 5;
 * @return {?proto.Data0x8203.Type}
 */
proto.Data0x8203.prototype.getType = function() {
  return /** @type{?proto.Data0x8203.Type} */ (
    jspb.Message.getWrapperField(this, proto.Data0x8203.Type, 5));
};


/** @param {?proto.Data0x8203.Type|undefined} value */
proto.Data0x8203.prototype.setType = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.Data0x8203.prototype.clearType = function() {
  this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Data0x8203.prototype.hasType = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8608 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Data0x8608.repeatedFields_, null);
};
goog.inherits(proto.Data0x8608, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8608.displayName = 'proto.Data0x8608';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Data0x8608.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8608.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8608.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8608} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8608.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    idsList: jspb.Message.toObjectList(msg.getIdsList(),
    proto.Data0x8608.Ids.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8608}
 */
proto.Data0x8608.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8608;
  return proto.Data0x8608.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8608} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8608}
 */
proto.Data0x8608.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTypeid(value);
      break;
    case 2:
      var value = new proto.Data0x8608.Ids;
      reader.readMessage(value,proto.Data0x8608.Ids.deserializeBinaryFromReader);
      msg.addIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8608.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8608.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8608} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8608.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Data0x8608.Ids.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data0x8608.Ids = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data0x8608.Ids, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Data0x8608.Ids.displayName = 'proto.Data0x8608.Ids';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data0x8608.Ids.prototype.toObject = function(opt_includeInstance) {
  return proto.Data0x8608.Ids.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data0x8608.Ids} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8608.Ids.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data0x8608.Ids}
 */
proto.Data0x8608.Ids.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data0x8608.Ids;
  return proto.Data0x8608.Ids.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data0x8608.Ids} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data0x8608.Ids}
 */
proto.Data0x8608.Ids.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data0x8608.Ids.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data0x8608.Ids.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data0x8608.Ids} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data0x8608.Ids.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Data0x8608.Ids.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Data0x8608.Ids.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 typeId = 1;
 * @return {number}
 */
proto.Data0x8608.prototype.getTypeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Data0x8608.prototype.setTypeid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Ids ids = 2;
 * @return {!Array<!proto.Data0x8608.Ids>}
 */
proto.Data0x8608.prototype.getIdsList = function() {
  return /** @type{!Array<!proto.Data0x8608.Ids>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Data0x8608.Ids, 2));
};


/** @param {!Array<!proto.Data0x8608.Ids>} value */
proto.Data0x8608.prototype.setIdsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Data0x8608.Ids=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Data0x8608.Ids}
 */
proto.Data0x8608.prototype.addIds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Data0x8608.Ids, opt_index);
};


proto.Data0x8608.prototype.clearIdsList = function() {
  this.setIdsList([]);
};


goog.object.extend(exports, proto);
